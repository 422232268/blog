{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"712d8aa294c6da62c820c797c241813c5958625f","modified":1603080409987},{"_id":"themes/3-hexo/README.md","hash":"d828af269e0c287e86e7754988466e6f323e3b92","modified":1603080409989},{"_id":"themes/3-hexo/_config.yml","hash":"1d86a2acc198ffa5db7044a7e4596da4c6604f53","modified":1603082493498},{"_id":"source/about/index.md","hash":"2825c31459252d1d969a0e96e53a812c5800dc55","modified":1603080409989},{"_id":"themes/3-hexo/layout/index.ejs","hash":"003421f9a57927aa85aa71905313badb0b47820e","modified":1603080409994},{"_id":"themes/3-hexo/layout/indexs.md","hash":"7d289a21e84d707f7addd423b2a35a6da1272782","modified":1603080482230},{"_id":"themes/3-hexo/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1603080409994},{"_id":"source/_posts/test/hello-world.md","hash":"53c832304e4672af5ac56238f3282ccf2da9d0e3","modified":1603080409987},{"_id":"source/_posts/test/mac使用小技巧.md","hash":"53baef24778d0faf9ea60f0b0f752e54f3e10005","modified":1603080409987},{"_id":"source/_posts/test/为什么用axios不用ajax.md","hash":"da7f8d54ebc47dee7abc777038ef9ea9a9a913a3","modified":1603080409987},{"_id":"source/_posts/test/图标学习二 copy 2.md","hash":"7b407487790da797be73c7e210d711ee26fa9358","modified":1603080409988},{"_id":"source/_posts/test/图表示例代码.md","hash":"d44e4a327bd819dc62dda3f6f7929547757015f0","modified":1603080409988},{"_id":"source/_posts/test/彻底搞懂ReactHooks的原理和实现.md","hash":"ad134d577e3388f9ef870b95bedbaa978123e067","modified":1603080409988},{"_id":"source/_posts/test/流程图.md","hash":"14751b5b46a6e8cf4aba539acb78a5aba360e9af","modified":1603080409988},{"_id":"source/_posts/test/类图.md","hash":"56d13ad6fe769f523acf460a36f711bb582d7986","modified":1603080409988},{"_id":"source/_posts/test/顺序图.md","hash":"d80410b2d19794e721eefb0b7795bfcecb710649","modified":1603080409989},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"a0a0f191faafca2aa14abd32ec1b1a385dae1af7","modified":1603080409990},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"7f28d7736133cc8012fbb8a5eeeb1174b862aec6","modified":1603080409990},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1603080409990},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"d209ddcfd0149760a30837076be345a09e1797c5","modified":1603080409991},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"1b849749e557d2af482dc49acc93407b72c717f3","modified":1603080409992},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"990003870f8c4303bfe0e52d9446265a7c1af676","modified":1603080409992},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1603080409992},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"f39f2ab3a67042e55cd6a51792bfd5ad697808f0","modified":1603080409992},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"30c3ab5847a18db678ffbe3fc6309ec96cb010c0","modified":1603080409992},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1603080409993},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"8ead8e5114586c3928864115eda2ec7452af72d0","modified":1603080409993},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"17ba2e5a021f418756e1356186016638f09d83e5","modified":1603080409993},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"301837aa3787004f069206440be25db32e3fb087","modified":1603080409993},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"71340ddd60ea14061771463140e299204ecf7ed9","modified":1603080409993},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1603080409993},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1603080409998},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"3934bcba5095e7e6c6b3a801a6e4fa3a35096e10","modified":1603080410002},{"_id":"themes/3-hexo/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1603080410002},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"03543ea2ecb5d3ffbb060ccc1f3dcb037f0eb14e","modified":1603080410004},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1603080410004},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1603080410005},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1603080410004},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1603080410008},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1603080410008},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1603080410009},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1603080410009},{"_id":"themes/3-hexo/source/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1603080410009},{"_id":"themes/3-hexo/source/img/favicon.ico","hash":"9e565e07a426744880055699f74880df61eb41d3","modified":1603080410004},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"243676ae2e5a9010a327ec2c6973d24b084c9d2d","modified":1603080410005},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"fa6675230f8c313236604e26926b142f4f418bdd","modified":1603080409991},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1603080409991},{"_id":"themes/3-hexo/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1603080409991},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"fbd3c7d72c8354d700918390c6cbfc0a11408277","modified":1603080409991},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"f16442568b43d034faaa8e3507f5ae8da34c7b72","modified":1603080409991},{"_id":"themes/3-hexo/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1603080409994},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1603080409994},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1603080409994},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1603080409995},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"4d5ac149709447c5eee45f0e23dadeea94fd98ce","modified":1603080409995},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1603080409995},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"1bd865029ba8c11750fff83d87f69e5d7c137928","modified":1603080409995},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"3da8fa04efccfd054a6a65f7153f197d4d68281d","modified":1603080409995},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1603080409995},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1603080409996},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"36bcec9a271f969014e1ec6c12c16bf60921d732","modified":1603080409996},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1603080409996},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1603080409997},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1603080409998},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1603080409996},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1603080409997},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1603080409998},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1603080409998},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1603080409999},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1603080409999},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1603080409997},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1603080409998},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1603080409999},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1603080409999},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1603080410000},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1603080410000},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1603080410000},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1603080410000},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1603080410000},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1603080410001},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1603080410001},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1603080410001},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1603080410001},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1603080410001},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1603080410001},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1603080410002},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"245a7c02c4f4e5082622a142e5c20f58b51255a7","modified":1603080410003},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1603080410008},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1603080410007},{"_id":"public/about/index.html","hash":"cd171906bbf619d14bc8f4ba2bd7fd3fe4259688","modified":1603082770761},{"_id":"public/2019/11/20/test/mac使用小技巧/index.html","hash":"377cd28e74a47ce2a3a21fb4f8819dc6f618b7f1","modified":1603082770761},{"_id":"public/2019/11/18/test/彻底搞懂ReactHooks的原理和实现/index.html","hash":"e7cb87651827d790dccf1000fbaf645ee5bb092b","modified":1603082770761},{"_id":"public/2019/11/18/test/图标学习二 copy 2/index.html","hash":"417d0c910ff410c9b7d9800bca1994078a652144","modified":1603082770761},{"_id":"public/2019/11/18/test/类图/index.html","hash":"1e0fc82466fa8774cbb5dbe836d771268199b19a","modified":1603082770761},{"_id":"public/2019/11/18/test/顺序图/index.html","hash":"b662435aec87c3f121bb0bc56affb72d3b79d91c","modified":1603082770761},{"_id":"public/2019/11/18/test/流程图/index.html","hash":"0bec2f24a738e9b9920d9524921de13610733375","modified":1603082770761},{"_id":"public/2019/11/18/test/图表示例代码/index.html","hash":"e38dbcbcdc46730cbdb1c24549ae73c3325cc655","modified":1603082770761},{"_id":"public/2019/11/17/test/hello-world/index.html","hash":"b673cbdd75c14e81d0edab7aa4d0bc2c7b2be2e9","modified":1603082770761},{"_id":"public/2019/11/17/test/为什么用axios不用ajax/index.html","hash":"f15c312d5bbbe32bd033d3e8cad57eb0ee758ce6","modified":1603082770761},{"_id":"public/archives/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/archives/2019/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/archives/2019/11/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/categories/web/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/categories/React/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/tags/frist/index.html","hash":"17573a860ce34c642f94940fa199860f5efe9313","modified":1603082770761},{"_id":"public/CNAME","hash":"712d8aa294c6da62c820c797c241813c5958625f","modified":1603082770761},{"_id":"public/img/avatar.jpg","hash":"03543ea2ecb5d3ffbb060ccc1f3dcb037f0eb14e","modified":1603082770761},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1603082770761},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1603082770761},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1603082770761},{"_id":"public/img/favicon.ico","hash":"9e565e07a426744880055699f74880df61eb41d3","modified":1603082770761},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1603082770761},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1603082770761},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1603082770761},{"_id":"public/css/fonts/iconfont.svg","hash":"c61a31e5310430312677fffe4286097d29d10151","modified":1603082770761},{"_id":"public/css/fonts/iconfont.eot","hash":"3dfe8e557d9dfaf39bca088a02b76deb82dbaa3d","modified":1603082770761},{"_id":"public/css/fonts/iconfont.woff","hash":"f8ed131ccf13f4bdd3ec11fc3e997339dd7b66ba","modified":1603082770761},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1603082770761},{"_id":"public/css/fonts/iconfont.ttf","hash":"aa087561480fb9c2cfd541e33d1e99d5ac1a56bb","modified":1603082770761},{"_id":"public/css/blog-encrypt.css","hash":"22e25b0d16ea053d25eb971e038c817a4c9cb584","modified":1603082770761},{"_id":"public/lib/blog-encrypt.js","hash":"c8ee4c3eb3bcfe4e34cdaa0cfad932adf7c639dc","modified":1603082770761},{"_id":"public/img/weixin.jpg","hash":"243676ae2e5a9010a327ec2c6973d24b084c9d2d","modified":1603082770761},{"_id":"public/css/mobile.css","hash":"79ab291be160e0ca753512a96c5198f7477f13be","modified":1603082770761},{"_id":"public/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1603082770761},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1603082770761},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1603082770761},{"_id":"public/css/hl_theme/atom-light.css","hash":"a3c8f3ee9a655594eff7ac545cb2e6914c1abcc2","modified":1603082770761},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1603082770761},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1603082770761},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1603082770761},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1603082770761},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1603082770761},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1603082770761},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1603082770761},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1603082770761},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1603082770761},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1603082770761},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1603082770761},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1603082770761},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1603082770761},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1603082770761},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1603082770761},{"_id":"public/css/style.css","hash":"fa10daca27f2163644aa8c14b0fca5aba9d14b06","modified":1603082770761},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1603082770761},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1603082770761},{"_id":"public/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1603082770761},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1603082770761},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1603082770761},{"_id":"public/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1603082770761},{"_id":"public/img/alipay.jpg","hash":"245a7c02c4f4e5082622a142e5c20f58b51255a7","modified":1603082770761}],"Category":[{"name":"web","_id":"ckgg23anv0006x9r317ap8wcs"},{"name":"React","_id":"ckgg23ao7000hx9r3442r5hoy"}],"Data":[],"Page":[{"title":"作者","date":"2019-11-17T14:58:42.000Z","_content":"### 个人简介\n\n王学忠\n\n目前从事前端开发工作,\n了解react,vue,koa,webpack.\n喜欢研究新兴技术和未来发展方向.\n\n#### 最近\n\n在空闲的时间研究n2n,希望喜欢网络的朋友一起交流.\n\n#### 联系方式\n\n- QQ: 422232268\n","source":"about/index.md","raw":"---\ntitle: 作者\ndate: 2019-11-17 22:58:42\n---\n### 个人简介\n\n王学忠\n\n目前从事前端开发工作,\n了解react,vue,koa,webpack.\n喜欢研究新兴技术和未来发展方向.\n\n#### 最近\n\n在空闲的时间研究n2n,希望喜欢网络的朋友一起交流.\n\n#### 联系方式\n\n- QQ: 422232268\n","updated":"2020-10-19T04:06:49.989Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckgg23ams0000x9r384bu169s","content":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p>王学忠</p>\n<p>目前从事前端开发工作,<br>了解react,vue,koa,webpack.<br>喜欢研究新兴技术和未来发展方向.</p>\n<h4 id=\"最近\"><a href=\"#最近\" class=\"headerlink\" title=\"最近\"></a>最近</h4><p>在空闲的时间研究n2n,希望喜欢网络的朋友一起交流.</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>QQ: 422232268</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p>王学忠</p>\n<p>目前从事前端开发工作,<br>了解react,vue,koa,webpack.<br>喜欢研究新兴技术和未来发展方向.</p>\n<h4 id=\"最近\"><a href=\"#最近\" class=\"headerlink\" title=\"最近\"></a>最近</h4><p>在空闲的时间研究n2n,希望喜欢网络的朋友一起交流.</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><ul>\n<li>QQ: 422232268</li>\n</ul>\n"}],"Post":[{"title":"Hello World","top":1,"date":"2019-11-17T14:19:51.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:56:24\n * @Description: file content\n -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n","source":"_posts/test/hello-world.md","raw":"---\ntitle: Hello World\ntop: 1\ndate: 2019-11-17 22:19:51\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:56:24\n * @Description: file content\n -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\nhexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\nhexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\nhexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n","slug":"test/hello-world","published":1,"updated":"2020-10-19T04:06:49.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23ann0001x9r34z9l6ruy","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:56:24\n * @Description: file content\n -->\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:56:24\n * @Description: file content\n -->\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre><code class=\"bash\">hexo new &quot;My New Post&quot;</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre><code class=\"bash\">hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre><code class=\"bash\">hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre><code class=\"bash\">hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"mac使用小技巧","top":1,"date":"2019-11-20T05:42:17.000Z","_content":"\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:50:39\n * @Description: file content\n -->\n\n## mac使用小技巧\n\n### 更改终端用户名\n\n- /etc/bashrc文件中的PS1='\\h:\\W \\u\\$ '，其中\\h代表主机名，\\u代表用户名\n例如:\n\n- 比如修改成：PS1='abc:\\W 123\\$ ' ， 终端显示如下:[地址](https://www.cnblogs.com/tdcqma/p/6714492.html)\n","source":"_posts/test/mac使用小技巧.md","raw":"---\ntitle: mac使用小技巧\ntop: 1\ndate: 2019-11-20 13:42:17\n---\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:50:39\n * @Description: file content\n -->\n\n## mac使用小技巧\n\n### 更改终端用户名\n\n- /etc/bashrc文件中的PS1='\\h:\\W \\u\\$ '，其中\\h代表主机名，\\u代表用户名\n例如:\n\n- 比如修改成：PS1='abc:\\W 123\\$ ' ， 终端显示如下:[地址](https://www.cnblogs.com/tdcqma/p/6714492.html)\n","slug":"test/mac使用小技巧","published":1,"updated":"2020-10-19T04:06:49.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23anq0002x9r3gsj4f1kv","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:50:39\n * @Description: file content\n -->\n\n<h2 id=\"mac使用小技巧\"><a href=\"#mac使用小技巧\" class=\"headerlink\" title=\"mac使用小技巧\"></a>mac使用小技巧</h2><h3 id=\"更改终端用户名\"><a href=\"#更改终端用户名\" class=\"headerlink\" title=\"更改终端用户名\"></a>更改终端用户名</h3><ul>\n<li><p>/etc/bashrc文件中的PS1=’\\h:\\W \\u$ ‘，其中\\h代表主机名，\\u代表用户名<br>例如:</p>\n</li>\n<li><p>比如修改成：PS1=’abc:\\W 123$ ‘ ， 终端显示如下:<a href=\"https://www.cnblogs.com/tdcqma/p/6714492.html\">地址</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:50:39\n * @Description: file content\n -->\n\n<h2 id=\"mac使用小技巧\"><a href=\"#mac使用小技巧\" class=\"headerlink\" title=\"mac使用小技巧\"></a>mac使用小技巧</h2><h3 id=\"更改终端用户名\"><a href=\"#更改终端用户名\" class=\"headerlink\" title=\"更改终端用户名\"></a>更改终端用户名</h3><ul>\n<li><p>/etc/bashrc文件中的PS1=’\\h:\\W \\u$ ‘，其中\\h代表主机名，\\u代表用户名<br>例如:</p>\n</li>\n<li><p>比如修改成：PS1=’abc:\\W 123$ ‘ ， 终端显示如下:<a href=\"https://www.cnblogs.com/tdcqma/p/6714492.html\">地址</a></p>\n</li>\n</ul>\n"},{"title":"为什么用axios不用ajax","date":"2019-11-17T14:19:51.000Z","_content":"\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-26 16:08:03\n * @Description: file content\n -->\n\n## 为什么用axios不用ajax\n\n### 区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\n\n### 优缺点\n\n### ajax\n\n1. 本身是针对MVC编程，不符合前端MVVM的浪潮\n\n2. 基于原生XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案，jquery整个项目太大，单纯使用ajax却要引入整个jquery非常不合理（采取个性化打包方案又不能享受cdn服务）\n\n3. ajax不支持浏览器的back按钮\n\n4. 安全问题ajax暴露了与服务器交互的细节\n\n5. 对搜索引擎的支持比较弱\n\n6. 破坏程序的异常机制\n\n7. 不容易调试\n\n### axios\n\n1. 从node.js创建http请求\n\n2. 支持Promise API\n\n3. 客户端防止CSRF（网站恶意利用）\n\n4. 提供了一些并发请求的接口\n","source":"_posts/test/为什么用axios不用ajax.md","raw":"---\ntitle: 为什么用axios不用ajax\n# top: 1\ndate: 2019-11-17 22:19:51\n---\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-26 16:08:03\n * @Description: file content\n -->\n\n## 为什么用axios不用ajax\n\n### 区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\n\n### 优缺点\n\n### ajax\n\n1. 本身是针对MVC编程，不符合前端MVVM的浪潮\n\n2. 基于原生XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案，jquery整个项目太大，单纯使用ajax却要引入整个jquery非常不合理（采取个性化打包方案又不能享受cdn服务）\n\n3. ajax不支持浏览器的back按钮\n\n4. 安全问题ajax暴露了与服务器交互的细节\n\n5. 对搜索引擎的支持比较弱\n\n6. 破坏程序的异常机制\n\n7. 不容易调试\n\n### axios\n\n1. 从node.js创建http请求\n\n2. 支持Promise API\n\n3. 客户端防止CSRF（网站恶意利用）\n\n4. 提供了一些并发请求的接口\n","slug":"test/为什么用axios不用ajax","published":1,"updated":"2020-10-19T04:06:49.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23anr0003x9r33btt7zxj","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-26 16:08:03\n * @Description: file content\n -->\n\n<h2 id=\"为什么用axios不用ajax\"><a href=\"#为什么用axios不用ajax\" class=\"headerlink\" title=\"为什么用axios不用ajax\"></a>为什么用axios不用ajax</h2><h3 id=\"区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\"><a href=\"#区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\" class=\"headerlink\" title=\"区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\"></a>区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios</h3><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><ol>\n<li><p>本身是针对MVC编程，不符合前端MVVM的浪潮</p>\n</li>\n<li><p>基于原生XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案，jquery整个项目太大，单纯使用ajax却要引入整个jquery非常不合理（采取个性化打包方案又不能享受cdn服务）</p>\n</li>\n<li><p>ajax不支持浏览器的back按钮</p>\n</li>\n<li><p>安全问题ajax暴露了与服务器交互的细节</p>\n</li>\n<li><p>对搜索引擎的支持比较弱</p>\n</li>\n<li><p>破坏程序的异常机制</p>\n</li>\n<li><p>不容易调试</p>\n</li>\n</ol>\n<h3 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h3><ol>\n<li><p>从node.js创建http请求</p>\n</li>\n<li><p>支持Promise API</p>\n</li>\n<li><p>客户端防止CSRF（网站恶意利用）</p>\n</li>\n<li><p>提供了一些并发请求的接口</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-26 16:08:03\n * @Description: file content\n -->\n\n<h2 id=\"为什么用axios不用ajax\"><a href=\"#为什么用axios不用ajax\" class=\"headerlink\" title=\"为什么用axios不用ajax\"></a>为什么用axios不用ajax</h2><h3 id=\"区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\"><a href=\"#区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\" class=\"headerlink\" title=\"区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios\"></a>区别：axios是通过Promise实现对ajax技术的一种封装，就像jquery对ajax的封装一样，简单来说就是ajax技术实现了局部数据的刷新，axios实现了对ajax的封装，axios有的ajax都有，ajax有的axios不一定有，总结一句话就是axios是ajax，ajax不止axios</h3><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><h3 id=\"ajax\"><a href=\"#ajax\" class=\"headerlink\" title=\"ajax\"></a>ajax</h3><ol>\n<li><p>本身是针对MVC编程，不符合前端MVVM的浪潮</p>\n</li>\n<li><p>基于原生XHR开发，XHR本身的架构不清晰，已经有了fetch的替代方案，jquery整个项目太大，单纯使用ajax却要引入整个jquery非常不合理（采取个性化打包方案又不能享受cdn服务）</p>\n</li>\n<li><p>ajax不支持浏览器的back按钮</p>\n</li>\n<li><p>安全问题ajax暴露了与服务器交互的细节</p>\n</li>\n<li><p>对搜索引擎的支持比较弱</p>\n</li>\n<li><p>破坏程序的异常机制</p>\n</li>\n<li><p>不容易调试</p>\n</li>\n</ol>\n<h3 id=\"axios\"><a href=\"#axios\" class=\"headerlink\" title=\"axios\"></a>axios</h3><ol>\n<li><p>从node.js创建http请求</p>\n</li>\n<li><p>支持Promise API</p>\n</li>\n<li><p>客户端防止CSRF（网站恶意利用）</p>\n</li>\n<li><p>提供了一些并发请求的接口</p>\n</li>\n</ol>\n"},{"title":"第四篇笔记","abstract":"这是一篇加密的文章。","message":"enter password to read.","date":"2019-11-17T18:11:57.000Z","_content":"\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:01:34\n * @Description: file content\n -->\n\n## 流程图-基本语法\n\n### 这声明了一个从上到下（TD或TB）定向的图形\n\n``` bash\ngraph TD\n    Start --> Stop\n\n```\n\n``` mermaid\ngraph TD\n    Start --> Stop\n","source":"_posts/test/图标学习二 copy 2.md","raw":"---\ntitle: 第四篇笔记\ntags: frist\ncategories: web\n# password: 123456\nabstract: 这是一篇加密的文章。\nmessage: enter password to read.\ndate: 2019-11-18 02:11:57\n---\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:01:34\n * @Description: file content\n -->\n\n## 流程图-基本语法\n\n### 这声明了一个从上到下（TD或TB）定向的图形\n\n``` bash\ngraph TD\n    Start --> Stop\n\n```\n\n``` mermaid\ngraph TD\n    Start --> Stop\n","slug":"test/图标学习二 copy 2","published":1,"updated":"2020-10-19T04:06:49.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23ans0004x9r31agu7s4z","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:01:34\n * @Description: file content\n -->\n\n<h2 id=\"流程图-基本语法\"><a href=\"#流程图-基本语法\" class=\"headerlink\" title=\"流程图-基本语法\"></a>流程图-基本语法</h2><h3 id=\"这声明了一个从上到下（TD或TB）定向的图形\"><a href=\"#这声明了一个从上到下（TD或TB）定向的图形\" class=\"headerlink\" title=\"这声明了一个从上到下（TD或TB）定向的图形\"></a>这声明了一个从上到下（TD或TB）定向的图形</h3><pre><code class=\"bash\">graph TD\n    Start --&gt; Stop\n</code></pre>\n<pre><code class=\"mermaid\">graph TD\n    Start --&gt; Stop</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 13:01:34\n * @Description: file content\n -->\n\n<h2 id=\"流程图-基本语法\"><a href=\"#流程图-基本语法\" class=\"headerlink\" title=\"流程图-基本语法\"></a>流程图-基本语法</h2><h3 id=\"这声明了一个从上到下（TD或TB）定向的图形\"><a href=\"#这声明了一个从上到下（TD或TB）定向的图形\" class=\"headerlink\" title=\"这声明了一个从上到下（TD或TB）定向的图形\"></a>这声明了一个从上到下（TD或TB）定向的图形</h3><pre><code class=\"bash\">graph TD\n    Start --&gt; Stop\n</code></pre>\n<pre><code class=\"mermaid\">graph TD\n    Start --&gt; Stop</code></pre>\n"},{"title":"图表示例代码","date":"2019-11-17T16:19:51.000Z","_content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-19 18:01:29\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 11:08:38\n * @Description: file content\n -->\n\n## 简单图表\n\n### 简易流程图\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n```\n\n```base\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n```\n\n### 关系图\n\n```mermaid\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n```base\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n### 流程图\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n\n```\n\n```base\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n\n```\n\n### 甘特图\n\n```mermaid\ngantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n\n```\n\n```base\ngantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n\n```\n\n```mermaid\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n\n```\n\n```base\nclassDiagram\n    Class01 <|-- AveryLongClass : Cool\n    Class03 *-- Class04\n    Class05 o-- Class06\n    Class07 .. Class08\n    Class09 --> C2 : Where am i?\n    Class09 --* C3\n    Class09 --|> Class07\n    Class07 : equals()\n    Class07 : Object[] elementData\n    Class01 : size()\n    Class01 : int chimp\n    Class01 : int gorilla\n    Class08 <--> C2: Cool label\n\n```\n\n### git图\n\n```mermaid\ngitGraph:\noptions\n{\n    \"nodeSpacing\": 130,\n    \"nodeRadius\": 5\n}\nend\ncommit\n\ncommit\n\nbranch newbranch\n\ncheckout newbranch\n\ncommit\ncommit\n\ncheckout master\ncommit\ncommit\nmerge newbranch\n\n```\n\n```base\ngitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch newbranch\ncheckout newbranch\ncommit\ncommit\ncheckout master\ncommit\ncommit\nmerge newbranch\n\n```\n","source":"_posts/test/图表示例代码.md","raw":"---\n\ntitle: 图表示例代码\ntags: frist\ncategories: web\ndate: 2019-11-18 00:19:51\n---\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-19 18:01:29\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 11:08:38\n * @Description: file content\n -->\n\n## 简单图表\n\n### 简易流程图\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n```\n\n```base\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n```\n\n### 关系图\n\n```mermaid\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n```base\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n### 流程图\n\n```mermaid\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n\n```\n\n```base\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!\n\n```\n\n### 甘特图\n\n```mermaid\ngantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n\n```\n\n```base\ngantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n\n```\n\n```mermaid\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n\n```\n\n```base\nclassDiagram\n    Class01 <|-- AveryLongClass : Cool\n    Class03 *-- Class04\n    Class05 o-- Class06\n    Class07 .. Class08\n    Class09 --> C2 : Where am i?\n    Class09 --* C3\n    Class09 --|> Class07\n    Class07 : equals()\n    Class07 : Object[] elementData\n    Class01 : size()\n    Class01 : int chimp\n    Class01 : int gorilla\n    Class08 <--> C2: Cool label\n\n```\n\n### git图\n\n```mermaid\ngitGraph:\noptions\n{\n    \"nodeSpacing\": 130,\n    \"nodeRadius\": 5\n}\nend\ncommit\n\ncommit\n\nbranch newbranch\n\ncheckout newbranch\n\ncommit\ncommit\n\ncheckout master\ncommit\ncommit\nmerge newbranch\n\n```\n\n```base\ngitGraph:\noptions\n{\n    \"nodeSpacing\": 150,\n    \"nodeRadius\": 10\n}\nend\ncommit\nbranch newbranch\ncheckout newbranch\ncommit\ncommit\ncheckout master\ncommit\ncommit\nmerge newbranch\n\n```\n","slug":"test/图表示例代码","published":1,"updated":"2020-10-19T04:06:49.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23anu0005x9r3bryf223h","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-19 18:01:29\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 11:08:38\n * @Description: file content\n -->\n\n<h2 id=\"简单图表\"><a href=\"#简单图表\" class=\"headerlink\" title=\"简单图表\"></a>简单图表</h2><h3 id=\"简易流程图\"><a href=\"#简易流程图\" class=\"headerlink\" title=\"简易流程图\"></a>简易流程图</h3><pre class=\"mermaid\">graph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;</pre>\n\n<pre><code class=\"base\">graph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n</code></pre>\n<h3 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图\"></a>关系图</h3><pre class=\"mermaid\">graph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end</pre>\n\n<pre><code class=\"base\">graph TB\n    c1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n</code></pre>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><pre class=\"mermaid\">sequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!</pre>\n\n<pre><code class=\"base\">sequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&gt;&gt;John: Hello John, how are you?\n    loop Healthcheck\n        John-&gt;&gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts &lt;br/&gt;prevail!\n    John--&gt;&gt;Alice: Great!\n    John-&gt;&gt;Bob: How about you?\n    Bob--&gt;&gt;John: Jolly good!\n</code></pre>\n<h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><pre class=\"mermaid\">gantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d</pre>\n\n<pre><code class=\"base\">gantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n</code></pre>\n<pre class=\"mermaid\">classDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label</pre>\n\n<pre><code class=\"base\">classDiagram\n    Class01 &lt;|-- AveryLongClass : Cool\n    Class03 *-- Class04\n    Class05 o-- Class06\n    Class07 .. Class08\n    Class09 --&gt; C2 : Where am i?\n    Class09 --* C3\n    Class09 --|&gt; Class07\n    Class07 : equals()\n    Class07 : Object[] elementData\n    Class01 : size()\n    Class01 : int chimp\n    Class01 : int gorilla\n    Class08 &lt;--&gt; C2: Cool label\n</code></pre>\n<h3 id=\"git图\"><a href=\"#git图\" class=\"headerlink\" title=\"git图\"></a>git图</h3><pre class=\"mermaid\">gitGraph:\noptions\n{\n    \"nodeSpacing\": 130,\n    \"nodeRadius\": 5\n}\nend\ncommit\n\ncommit\n\nbranch newbranch\n\ncheckout newbranch\n\ncommit\ncommit\n\ncheckout master\ncommit\ncommit\nmerge newbranch</pre>\n\n<pre><code class=\"base\">gitGraph:\noptions\n{\n    &quot;nodeSpacing&quot;: 150,\n    &quot;nodeRadius&quot;: 10\n}\nend\ncommit\nbranch newbranch\ncheckout newbranch\ncommit\ncommit\ncheckout master\ncommit\ncommit\nmerge newbranch\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-19 18:01:29\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 11:08:38\n * @Description: file content\n -->\n\n<h2 id=\"简单图表\"><a href=\"#简单图表\" class=\"headerlink\" title=\"简单图表\"></a>简单图表</h2><h3 id=\"简易流程图\"><a href=\"#简易流程图\" class=\"headerlink\" title=\"简易流程图\"></a>简易流程图</h3><pre class=\"mermaid\">graph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;</pre>\n\n<pre><code class=\"base\">graph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n</code></pre>\n<h3 id=\"关系图\"><a href=\"#关系图\" class=\"headerlink\" title=\"关系图\"></a>关系图</h3><pre class=\"mermaid\">graph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end</pre>\n\n<pre><code class=\"base\">graph TB\n    c1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n</code></pre>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><pre class=\"mermaid\">sequenceDiagram\n    participant Alice\n    participant Bob\n    Alice->>John: Hello John, how are you?\n    loop Healthcheck\n        John->>John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts <br/>prevail!\n    John-->>Alice: Great!\n    John->>Bob: How about you?\n    Bob-->>John: Jolly good!</pre>\n\n<pre><code class=\"base\">sequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&gt;&gt;John: Hello John, how are you?\n    loop Healthcheck\n        John-&gt;&gt;John: Fight against hypochondria\n    end\n    Note right of John: Rational thoughts &lt;br/&gt;prevail!\n    John--&gt;&gt;Alice: Great!\n    John-&gt;&gt;Bob: How about you?\n    Bob--&gt;&gt;John: Jolly good!\n</code></pre>\n<h3 id=\"甘特图\"><a href=\"#甘特图\" class=\"headerlink\" title=\"甘特图\"></a>甘特图</h3><pre class=\"mermaid\">gantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d</pre>\n\n<pre><code class=\"base\">gantt\n    dateFormat  YYYY-MM-DD\n    title Adding GANTT diagram to mermaid\n    excludes weekdays 2014-01-10\n\n    section A section\n    Completed task            :done,    des1, 2014-01-06,2014-01-08\n    Active task               :active,  des2, 2014-01-09, 3d\n    Future task               :         des3, after des2, 5d\n    Future task2               :         des4, after des3, 5d\n</code></pre>\n<pre class=\"mermaid\">classDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label</pre>\n\n<pre><code class=\"base\">classDiagram\n    Class01 &lt;|-- AveryLongClass : Cool\n    Class03 *-- Class04\n    Class05 o-- Class06\n    Class07 .. Class08\n    Class09 --&gt; C2 : Where am i?\n    Class09 --* C3\n    Class09 --|&gt; Class07\n    Class07 : equals()\n    Class07 : Object[] elementData\n    Class01 : size()\n    Class01 : int chimp\n    Class01 : int gorilla\n    Class08 &lt;--&gt; C2: Cool label\n</code></pre>\n<h3 id=\"git图\"><a href=\"#git图\" class=\"headerlink\" title=\"git图\"></a>git图</h3><pre class=\"mermaid\">gitGraph:\noptions\n{\n    \"nodeSpacing\": 130,\n    \"nodeRadius\": 5\n}\nend\ncommit\n\ncommit\n\nbranch newbranch\n\ncheckout newbranch\n\ncommit\ncommit\n\ncheckout master\ncommit\ncommit\nmerge newbranch</pre>\n\n<pre><code class=\"base\">gitGraph:\noptions\n{\n    &quot;nodeSpacing&quot;: 150,\n    &quot;nodeRadius&quot;: 10\n}\nend\ncommit\nbranch newbranch\ncheckout newbranch\ncommit\ncommit\ncheckout master\ncommit\ncommit\nmerge newbranch\n</code></pre>\n"},{"title":"彻底搞懂ReactHooks的原理和实现","date":"2019-11-18T05:29:22.000Z","_content":"\n### 摘要\n\n#### 当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力\n\n#### 在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决\n\n- useState 的实现原理\n- 为什么不能在循环、判断内部使用Hook\n- useEffect的实现原理\n- useEffect的应用场景\n- ```Class``` vs ```Hooks```\n\n#### 以上代码均由TypeScript来实现,文中全部dome均在[github]( gist.github.com/dongyuanxin/)中实现\n\n### useState的实现原理\n\n- 当调用useState的时候,回返回形如```(变量,函数)```的一个组件.并且state的初始值就是外部调用useState的时候传入的参数\n- 理清楚了传参和返回值,再来看下useState还做了些什么.正如下面的代码所示,当点击按钮的时候,执行setNum.状态num被更新,并且UI识图更新.显然,useState翻的用于更改状态的函数,自动调用了```render``` 方法来触发视图更新\n\n```React\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <button onClick={() => setNum(num + 1)}>加 1</button>\n    </div>\n  );\n}\n```\n\n- 有了上面的实验,借助一下闭包,封装一个setState如下:\n\n```React\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n\nlet state: any;\n\nfunction useState<T>(initialState: T): [T, (newState: T) => void] {\n  state = state || initialState;\n\n  function setState(newState: T) {\n    state = newState;\n    render();\n  }\n\n  return [state, setState];\n}\n\nrender(); // 首次渲染\n```\n\n- 这是一个简易能用的useState雏形,它也解决了文章开始提到的{useState的实现原理}这个问题,但如果在函数内生命多个state,在当前代码中,只有第一个state 是生效的(请看state=state||initialState)\n\n### 为什么不能在循环、判断内部使用Hook\n\n- 先不要考虑题目提及的问题.思路还是回到如何让useState支持多个state.React Hook 看起来非常 Magic 的实现，本质上还是通过 Array 来实现的\n- 前面 useState 的简单实现里，初始的状态是保存在一个全局变量中的。以此类推，多个状态，应该是保存在一个专门的全局容器中。这个容器，就是一个朴实无华的 Array 对象。具体过程如下：\n\n1. 第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。\n2. 更新 state，触发再次渲染的时候。cursor 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。\n\n- 请看下面这张图，每次使用 useState，都会向 STATE 容器中添加新的状态。\n\n\n\n\n\n```React\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst states: any[] = [];\nlet cursor: number = 0;\n\nfunction useState<T>(initialState: T): [T, (newState: T) => void] {\n  const currenCursor = cursor;\n  states[currenCursor] = states[currenCursor] || initialState; // 检查是否渲染过\n\n  function setState(newState: T) {\n    states[currenCursor] = newState;\n    render();\n  }\n\n  ++cursor; // update: cursor\n  return [states[currenCursor], setState];\n}\n\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n  const [num2, setNum2] = useState < number > 1;\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <div>\n        <button onClick={() => setNum(num + 1)}>加 1</button>\n        <button onClick={() => setNum(num - 1)}>减 1</button>\n      </div>\n      <hr />\n      <div>num2: {num2}</div>\n      <div>\n        <button onClick={() => setNum2(num2 * 2)}>扩大一倍</button>\n        <button onClick={() => setNum2(num2 / 2)}>缩小一倍</button>\n      </div>\n    </div>\n  );\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n  cursor = 0; // 重置cursor\n}\n\nrender(); // 首次渲染\n\n```\n\n- 此时，如果想在循环、判断等不在函数组件顶部的地方使用 Hook，如下所示：\n\n```React\nlet tag = true;\n\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n\n  // 只有初次渲染，才执行\n  if (tag) {\n    const [unusedNum] = useState < number > 1;\n    tag = false;\n  }\n\n  const [num2, setNum2] = useState < number > 2;\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <div>\n        <button onClick={() => setNum(num + 1)}>加 1</button>\n        <button onClick={() => setNum(num - 1)}>减 1</button>\n      </div>\n      <hr />\n      <div>num2: {num2}</div>\n      <div>\n        <button onClick={() => setNum2(num2 * 2)}>扩大一倍</button>\n        <button onClick={() => setNum2(num2 / 2)}>缩小一倍</button>\n      </div>\n    </div>\n  );\n}\n```\n\n- 由于在条件判断的逻辑中，重置了tag=false，因此此后的渲染不会再进入条件判断语句。看起来好像没有问题？但是，由于 useState 是基于 Array+Cursor 来实现的，第一次渲染时候，state 和 cursor 的对应关系如下表\n\n变量名|Cursor\n-|-\nnum|0\nunusedNum|1\nnum2|2\n\n- 当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用\n- 当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用\n\n### useEffect 的实现原理\n\n- 在探索 useEffect 原理的时候，一直被一个问题困扰：useEffect 作用和用途是什么？当然，用于函数的副作用这句话谁都会讲。举个例子吧\n\n```React\nfunction App() {\n  const [num, setNum] = useState(0);\n\n  useEffect(() => {\n    // 模拟异步请求后端数据\n    setTimeout(() => {\n      setNum(num + 1);\n    }, 1000);\n  }, []);\n\n  return <div>{!num ? \"请求后端数据...\" : `后端数据是 ${num}`}</div>;\n}\n```\n\n- 这段代码，虽然这样组织可读性更高，毕竟可以将这个请求理解为函数的副作用。但这并不是必要的。完全可以不使用useEffect，直接使用setTimeout，并且它的回调函数中更新函数组件的 state\n- 在阅读A Complete Guide to useEffect和构建你自己的 Hooks之后，我才理解 useEffect 的存在的必要性和意义\n- 在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用（可以类比 Class 类的关于 nextprops 和 prevProps 的生命周期）。好处显然易见，相比于直接裸写在函数组件顶层，useEffect 能根据需要，避免多余的 render\n- 下面是一个不包括销毁副作用功能的 useEffect 的 TypeScript 实现\n\n```React\n// 还是利用 Array + Cursor的思路\nconst allDeps: any[][] = [];\nlet effectCursor: number = 0;\n\nfunction useEffect(callback: () => void, deps: any[]) {\n  if (!allDeps[effectCursor]) {\n    // 初次渲染：赋值 + 调用回调函数\n    allDeps[effectCursor] = deps;\n    ++effectCursor;\n    callback();\n    return;\n  }\n\n  const currenEffectCursor = effectCursor;\n  const rawDeps = allDeps[currenEffectCursor];\n  // 检测依赖项是否发生变化，发生变化需要重新render\n  const isChanged = rawDeps.some(\n    (dep: any, index: number) => dep !== deps[index]\n  );\n  if (isChanged) {\n    callback();\n  }\n  ++effectCursor;\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n  effectCursor = 0; // 注意将 effectCursor 重置为0\n}\n```\n\n- 对于 useEffect 的实现，配合下面案例的使用会更容易理解。当然，你也可以在这个 useEffect 中发起异步请求，并在接受数据后，调用 state 的更新函数，不会发生爆栈的情况\n\n```React\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n  const [num2] = useState < number > 1;\n\n  // 多次触发\n  // 每次点击按钮，都会触发 setNum 函数\n  // 副作用检测到 num 变化，会自动调用回调函数\n  useEffect(() => {\n    console.log(\"num update: \", num);\n  }, [num]);\n\n  // 仅第一次触发\n  // 只会在compoentDidMount时，触发一次\n  // 副作用函数不会多次执行\n  useEffect(() => {\n    console.log(\"num2 update: \", num2);\n  }, [num2]);\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <div>\n        <button onClick={() => setNum(num + 1)}>加 1</button>\n        <button onClick={() => setNum(num - 1)}>减 1</button>\n      </div>\n    </div>\n  );\n}\n```\n\n- useEffect 第一个回调函数可以返回一个用于销毁副作用的函数，相当于 Class 组件的 unmount 生命周期。这里为了方便说明，没有进行实现\n- 在这一小节中，尝试解答了 「🤔️ useEffect 的实现原理」和 「🤔️ useEffect 的应用场景」这两个问题\n\n### Class VS Hooks\n\n- 虽然 Hooks 看起来更酷炫，更简洁。但是在实际开发中我更倾向于使用 Class 来声明组件。两种方法的对比如下\n\nClass|Hooks\n- | -\n代码逻辑清晰（构造函数、componentDidMount 等）|需要配合变量名和注释\n不容易内存泄漏|容易发生内存泄漏\n\n- 总的来说，Hooks 对代码编写的要求较高，在没有有效机制保证代码可读性、规避风险的情况下，Class 依然是我的首选。关于内存泄漏，下面是一个例子（目前还没找到方法规避这种向全局传递状态更新函数的做法\n\n```React\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nlet func: any;\nsetInterval(() => {\n  typeof func === \"function\" && func(Date.now());\n  console.log(\"interval\");\n}, 1000);\n\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n  if (typeof func !== \"function\") {\n    func = setNum;\n  }\n  return <div>{num}</div>;\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n\nrender();\n```\n\n### 参考链接\n\n[ReactHooks的原理和实现](https://xin-tan.com/passages/2019-10-21-react-hooks/#%E6%91%98%E8%A6%81)\n[useEffect 完整指南](https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/)\n[React Hooks 原理](https://github.com/brickspert/blog/issues/26)\n","source":"_posts/test/彻底搞懂ReactHooks的原理和实现.md","raw":"---\ntitle: 彻底搞懂ReactHooks的原理和实现\n# tags: frist\ncategories: React\ndate: 2019-11-18 13:29:22\n---\n\n### 摘要\n\n#### 当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力\n\n#### 在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决\n\n- useState 的实现原理\n- 为什么不能在循环、判断内部使用Hook\n- useEffect的实现原理\n- useEffect的应用场景\n- ```Class``` vs ```Hooks```\n\n#### 以上代码均由TypeScript来实现,文中全部dome均在[github]( gist.github.com/dongyuanxin/)中实现\n\n### useState的实现原理\n\n- 当调用useState的时候,回返回形如```(变量,函数)```的一个组件.并且state的初始值就是外部调用useState的时候传入的参数\n- 理清楚了传参和返回值,再来看下useState还做了些什么.正如下面的代码所示,当点击按钮的时候,执行setNum.状态num被更新,并且UI识图更新.显然,useState翻的用于更改状态的函数,自动调用了```render``` 方法来触发视图更新\n\n```React\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <button onClick={() => setNum(num + 1)}>加 1</button>\n    </div>\n  );\n}\n```\n\n- 有了上面的实验,借助一下闭包,封装一个setState如下:\n\n```React\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n\nlet state: any;\n\nfunction useState<T>(initialState: T): [T, (newState: T) => void] {\n  state = state || initialState;\n\n  function setState(newState: T) {\n    state = newState;\n    render();\n  }\n\n  return [state, setState];\n}\n\nrender(); // 首次渲染\n```\n\n- 这是一个简易能用的useState雏形,它也解决了文章开始提到的{useState的实现原理}这个问题,但如果在函数内生命多个state,在当前代码中,只有第一个state 是生效的(请看state=state||initialState)\n\n### 为什么不能在循环、判断内部使用Hook\n\n- 先不要考虑题目提及的问题.思路还是回到如何让useState支持多个state.React Hook 看起来非常 Magic 的实现，本质上还是通过 Array 来实现的\n- 前面 useState 的简单实现里，初始的状态是保存在一个全局变量中的。以此类推，多个状态，应该是保存在一个专门的全局容器中。这个容器，就是一个朴实无华的 Array 对象。具体过程如下：\n\n1. 第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。\n2. 更新 state，触发再次渲染的时候。cursor 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。\n\n- 请看下面这张图，每次使用 useState，都会向 STATE 容器中添加新的状态。\n\n\n\n\n\n```React\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nconst states: any[] = [];\nlet cursor: number = 0;\n\nfunction useState<T>(initialState: T): [T, (newState: T) => void] {\n  const currenCursor = cursor;\n  states[currenCursor] = states[currenCursor] || initialState; // 检查是否渲染过\n\n  function setState(newState: T) {\n    states[currenCursor] = newState;\n    render();\n  }\n\n  ++cursor; // update: cursor\n  return [states[currenCursor], setState];\n}\n\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n  const [num2, setNum2] = useState < number > 1;\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <div>\n        <button onClick={() => setNum(num + 1)}>加 1</button>\n        <button onClick={() => setNum(num - 1)}>减 1</button>\n      </div>\n      <hr />\n      <div>num2: {num2}</div>\n      <div>\n        <button onClick={() => setNum2(num2 * 2)}>扩大一倍</button>\n        <button onClick={() => setNum2(num2 / 2)}>缩小一倍</button>\n      </div>\n    </div>\n  );\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n  cursor = 0; // 重置cursor\n}\n\nrender(); // 首次渲染\n\n```\n\n- 此时，如果想在循环、判断等不在函数组件顶部的地方使用 Hook，如下所示：\n\n```React\nlet tag = true;\n\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n\n  // 只有初次渲染，才执行\n  if (tag) {\n    const [unusedNum] = useState < number > 1;\n    tag = false;\n  }\n\n  const [num2, setNum2] = useState < number > 2;\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <div>\n        <button onClick={() => setNum(num + 1)}>加 1</button>\n        <button onClick={() => setNum(num - 1)}>减 1</button>\n      </div>\n      <hr />\n      <div>num2: {num2}</div>\n      <div>\n        <button onClick={() => setNum2(num2 * 2)}>扩大一倍</button>\n        <button onClick={() => setNum2(num2 / 2)}>缩小一倍</button>\n      </div>\n    </div>\n  );\n}\n```\n\n- 由于在条件判断的逻辑中，重置了tag=false，因此此后的渲染不会再进入条件判断语句。看起来好像没有问题？但是，由于 useState 是基于 Array+Cursor 来实现的，第一次渲染时候，state 和 cursor 的对应关系如下表\n\n变量名|Cursor\n-|-\nnum|0\nunusedNum|1\nnum2|2\n\n- 当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用\n- 当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用\n\n### useEffect 的实现原理\n\n- 在探索 useEffect 原理的时候，一直被一个问题困扰：useEffect 作用和用途是什么？当然，用于函数的副作用这句话谁都会讲。举个例子吧\n\n```React\nfunction App() {\n  const [num, setNum] = useState(0);\n\n  useEffect(() => {\n    // 模拟异步请求后端数据\n    setTimeout(() => {\n      setNum(num + 1);\n    }, 1000);\n  }, []);\n\n  return <div>{!num ? \"请求后端数据...\" : `后端数据是 ${num}`}</div>;\n}\n```\n\n- 这段代码，虽然这样组织可读性更高，毕竟可以将这个请求理解为函数的副作用。但这并不是必要的。完全可以不使用useEffect，直接使用setTimeout，并且它的回调函数中更新函数组件的 state\n- 在阅读A Complete Guide to useEffect和构建你自己的 Hooks之后，我才理解 useEffect 的存在的必要性和意义\n- 在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用（可以类比 Class 类的关于 nextprops 和 prevProps 的生命周期）。好处显然易见，相比于直接裸写在函数组件顶层，useEffect 能根据需要，避免多余的 render\n- 下面是一个不包括销毁副作用功能的 useEffect 的 TypeScript 实现\n\n```React\n// 还是利用 Array + Cursor的思路\nconst allDeps: any[][] = [];\nlet effectCursor: number = 0;\n\nfunction useEffect(callback: () => void, deps: any[]) {\n  if (!allDeps[effectCursor]) {\n    // 初次渲染：赋值 + 调用回调函数\n    allDeps[effectCursor] = deps;\n    ++effectCursor;\n    callback();\n    return;\n  }\n\n  const currenEffectCursor = effectCursor;\n  const rawDeps = allDeps[currenEffectCursor];\n  // 检测依赖项是否发生变化，发生变化需要重新render\n  const isChanged = rawDeps.some(\n    (dep: any, index: number) => dep !== deps[index]\n  );\n  if (isChanged) {\n    callback();\n  }\n  ++effectCursor;\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n  effectCursor = 0; // 注意将 effectCursor 重置为0\n}\n```\n\n- 对于 useEffect 的实现，配合下面案例的使用会更容易理解。当然，你也可以在这个 useEffect 中发起异步请求，并在接受数据后，调用 state 的更新函数，不会发生爆栈的情况\n\n```React\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n  const [num2] = useState < number > 1;\n\n  // 多次触发\n  // 每次点击按钮，都会触发 setNum 函数\n  // 副作用检测到 num 变化，会自动调用回调函数\n  useEffect(() => {\n    console.log(\"num update: \", num);\n  }, [num]);\n\n  // 仅第一次触发\n  // 只会在compoentDidMount时，触发一次\n  // 副作用函数不会多次执行\n  useEffect(() => {\n    console.log(\"num2 update: \", num2);\n  }, [num2]);\n\n  return (\n    <div>\n      <div>num: {num}</div>\n      <div>\n        <button onClick={() => setNum(num + 1)}>加 1</button>\n        <button onClick={() => setNum(num - 1)}>减 1</button>\n      </div>\n    </div>\n  );\n}\n```\n\n- useEffect 第一个回调函数可以返回一个用于销毁副作用的函数，相当于 Class 组件的 unmount 生命周期。这里为了方便说明，没有进行实现\n- 在这一小节中，尝试解答了 「🤔️ useEffect 的实现原理」和 「🤔️ useEffect 的应用场景」这两个问题\n\n### Class VS Hooks\n\n- 虽然 Hooks 看起来更酷炫，更简洁。但是在实际开发中我更倾向于使用 Class 来声明组件。两种方法的对比如下\n\nClass|Hooks\n- | -\n代码逻辑清晰（构造函数、componentDidMount 等）|需要配合变量名和注释\n不容易内存泄漏|容易发生内存泄漏\n\n- 总的来说，Hooks 对代码编写的要求较高，在没有有效机制保证代码可读性、规避风险的情况下，Class 依然是我的首选。关于内存泄漏，下面是一个例子（目前还没找到方法规避这种向全局传递状态更新函数的做法\n\n```React\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nlet func: any;\nsetInterval(() => {\n  typeof func === \"function\" && func(Date.now());\n  console.log(\"interval\");\n}, 1000);\n\nfunction App() {\n  const [num, setNum] = useState < number > 0;\n  if (typeof func !== \"function\") {\n    func = setNum;\n  }\n  return <div>{num}</div>;\n}\n\nfunction render() {\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n}\n\nrender();\n```\n\n### 参考链接\n\n[ReactHooks的原理和实现](https://xin-tan.com/passages/2019-10-21-react-hooks/#%E6%91%98%E8%A6%81)\n[useEffect 完整指南](https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/)\n[React Hooks 原理](https://github.com/brickspert/blog/issues/26)\n","slug":"test/彻底搞懂ReactHooks的原理和实现","published":1,"updated":"2020-10-19T04:06:49.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23anz0008x9r30evua59q","content":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><h4 id=\"当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力\"><a href=\"#当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力\" class=\"headerlink\" title=\"当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力\"></a>当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力</h4><h4 id=\"在正式开始前-我打算先提出几个问题-这些问题会在源码实现的过程中-逐步解决\"><a href=\"#在正式开始前-我打算先提出几个问题-这些问题会在源码实现的过程中-逐步解决\" class=\"headerlink\" title=\"在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决\"></a>在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决</h4><ul>\n<li>useState 的实现原理</li>\n<li>为什么不能在循环、判断内部使用Hook</li>\n<li>useEffect的实现原理</li>\n<li>useEffect的应用场景</li>\n<li><code>Class</code> vs <code>Hooks</code></li>\n</ul>\n<h4 id=\"以上代码均由TypeScript来实现-文中全部dome均在github中实现\"><a href=\"#以上代码均由TypeScript来实现-文中全部dome均在github中实现\" class=\"headerlink\" title=\"以上代码均由TypeScript来实现,文中全部dome均在github中实现\"></a>以上代码均由TypeScript来实现,文中全部dome均在<a href=\"gist.github.com/dongyuanxin/\">github</a>中实现</h4><h3 id=\"useState的实现原理\"><a href=\"#useState的实现原理\" class=\"headerlink\" title=\"useState的实现原理\"></a>useState的实现原理</h3><ul>\n<li>当调用useState的时候,回返回形如<code>(变量,函数)</code>的一个组件.并且state的初始值就是外部调用useState的时候传入的参数</li>\n<li>理清楚了传参和返回值,再来看下useState还做了些什么.正如下面的代码所示,当点击按钮的时候,执行setNum.状态num被更新,并且UI识图更新.显然,useState翻的用于更改状态的函数,自动调用了<code>render</code> 方法来触发视图更新</li>\n</ul>\n<pre><code class=\"React\">function App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n<li>有了上面的实验,借助一下闭包,封装一个setState如下:</li>\n</ul>\n<pre><code class=\"React\">function render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n}\n\nlet state: any;\n\nfunction useState&lt;T&gt;(initialState: T): [T, (newState: T) =&gt; void] {\n  state = state || initialState;\n\n  function setState(newState: T) {\n    state = newState;\n    render();\n  }\n\n  return [state, setState];\n}\n\nrender(); // 首次渲染</code></pre>\n<ul>\n<li>这是一个简易能用的useState雏形,它也解决了文章开始提到的{useState的实现原理}这个问题,但如果在函数内生命多个state,在当前代码中,只有第一个state 是生效的(请看state=state||initialState)</li>\n</ul>\n<h3 id=\"为什么不能在循环、判断内部使用Hook\"><a href=\"#为什么不能在循环、判断内部使用Hook\" class=\"headerlink\" title=\"为什么不能在循环、判断内部使用Hook\"></a>为什么不能在循环、判断内部使用Hook</h3><ul>\n<li>先不要考虑题目提及的问题.思路还是回到如何让useState支持多个state.React Hook 看起来非常 Magic 的实现，本质上还是通过 Array 来实现的</li>\n<li>前面 useState 的简单实现里，初始的状态是保存在一个全局变量中的。以此类推，多个状态，应该是保存在一个专门的全局容器中。这个容器，就是一个朴实无华的 Array 对象。具体过程如下：</li>\n</ul>\n<ol>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。</li>\n<li>更新 state，触发再次渲染的时候。cursor 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。</li>\n</ol>\n<ul>\n<li>请看下面这张图，每次使用 useState，都会向 STATE 容器中添加新的状态。</li>\n</ul>\n<pre><code class=\"React\">import React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\n\nconst states: any[] = [];\nlet cursor: number = 0;\n\nfunction useState&lt;T&gt;(initialState: T): [T, (newState: T) =&gt; void] {\n  const currenCursor = cursor;\n  states[currenCursor] = states[currenCursor] || initialState; // 检查是否渲染过\n\n  function setState(newState: T) {\n    states[currenCursor] = newState;\n    render();\n  }\n\n  ++cursor; // update: cursor\n  return [states[currenCursor], setState];\n}\n\nfunction App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n  const [num2, setNum2] = useState &lt; number &gt; 1;\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;hr /&gt;\n      &lt;div&gt;num2: {num2}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 * 2)}&gt;扩大一倍&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 / 2)}&gt;缩小一倍&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n  cursor = 0; // 重置cursor\n}\n\nrender(); // 首次渲染\n</code></pre>\n<ul>\n<li>此时，如果想在循环、判断等不在函数组件顶部的地方使用 Hook，如下所示：</li>\n</ul>\n<pre><code class=\"React\">let tag = true;\n\nfunction App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n\n  // 只有初次渲染，才执行\n  if (tag) {\n    const [unusedNum] = useState &lt; number &gt; 1;\n    tag = false;\n  }\n\n  const [num2, setNum2] = useState &lt; number &gt; 2;\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;hr /&gt;\n      &lt;div&gt;num2: {num2}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 * 2)}&gt;扩大一倍&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 / 2)}&gt;缩小一倍&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n<li>由于在条件判断的逻辑中，重置了tag=false，因此此后的渲染不会再进入条件判断语句。看起来好像没有问题？但是，由于 useState 是基于 Array+Cursor 来实现的，第一次渲染时候，state 和 cursor 的对应关系如下表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>Cursor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>num</td>\n<td>0</td>\n</tr>\n<tr>\n<td>unusedNum</td>\n<td>1</td>\n</tr>\n<tr>\n<td>num2</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<ul>\n<li>当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用</li>\n<li>当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用</li>\n</ul>\n<h3 id=\"useEffect-的实现原理\"><a href=\"#useEffect-的实现原理\" class=\"headerlink\" title=\"useEffect 的实现原理\"></a>useEffect 的实现原理</h3><ul>\n<li>在探索 useEffect 原理的时候，一直被一个问题困扰：useEffect 作用和用途是什么？当然，用于函数的副作用这句话谁都会讲。举个例子吧</li>\n</ul>\n<pre><code class=\"React\">function App() {\n  const [num, setNum] = useState(0);\n\n  useEffect(() =&gt; {\n    // 模拟异步请求后端数据\n    setTimeout(() =&gt; {\n      setNum(num + 1);\n    }, 1000);\n  }, []);\n\n  return &lt;div&gt;{!num ? &quot;请求后端数据...&quot; : `后端数据是 ${num}`}&lt;/div&gt;;\n}</code></pre>\n<ul>\n<li>这段代码，虽然这样组织可读性更高，毕竟可以将这个请求理解为函数的副作用。但这并不是必要的。完全可以不使用useEffect，直接使用setTimeout，并且它的回调函数中更新函数组件的 state</li>\n<li>在阅读A Complete Guide to useEffect和构建你自己的 Hooks之后，我才理解 useEffect 的存在的必要性和意义</li>\n<li>在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用（可以类比 Class 类的关于 nextprops 和 prevProps 的生命周期）。好处显然易见，相比于直接裸写在函数组件顶层，useEffect 能根据需要，避免多余的 render</li>\n<li>下面是一个不包括销毁副作用功能的 useEffect 的 TypeScript 实现</li>\n</ul>\n<pre><code class=\"React\">// 还是利用 Array + Cursor的思路\nconst allDeps: any[][] = [];\nlet effectCursor: number = 0;\n\nfunction useEffect(callback: () =&gt; void, deps: any[]) {\n  if (!allDeps[effectCursor]) {\n    // 初次渲染：赋值 + 调用回调函数\n    allDeps[effectCursor] = deps;\n    ++effectCursor;\n    callback();\n    return;\n  }\n\n  const currenEffectCursor = effectCursor;\n  const rawDeps = allDeps[currenEffectCursor];\n  // 检测依赖项是否发生变化，发生变化需要重新render\n  const isChanged = rawDeps.some(\n    (dep: any, index: number) =&gt; dep !== deps[index]\n  );\n  if (isChanged) {\n    callback();\n  }\n  ++effectCursor;\n}\n\nfunction render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n  effectCursor = 0; // 注意将 effectCursor 重置为0\n}</code></pre>\n<ul>\n<li>对于 useEffect 的实现，配合下面案例的使用会更容易理解。当然，你也可以在这个 useEffect 中发起异步请求，并在接受数据后，调用 state 的更新函数，不会发生爆栈的情况</li>\n</ul>\n<pre><code class=\"React\">function App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n  const [num2] = useState &lt; number &gt; 1;\n\n  // 多次触发\n  // 每次点击按钮，都会触发 setNum 函数\n  // 副作用检测到 num 变化，会自动调用回调函数\n  useEffect(() =&gt; {\n    console.log(&quot;num update: &quot;, num);\n  }, [num]);\n\n  // 仅第一次触发\n  // 只会在compoentDidMount时，触发一次\n  // 副作用函数不会多次执行\n  useEffect(() =&gt; {\n    console.log(&quot;num2 update: &quot;, num2);\n  }, [num2]);\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n<li>useEffect 第一个回调函数可以返回一个用于销毁副作用的函数，相当于 Class 组件的 unmount 生命周期。这里为了方便说明，没有进行实现</li>\n<li>在这一小节中，尝试解答了 「🤔️ useEffect 的实现原理」和 「🤔️ useEffect 的应用场景」这两个问题</li>\n</ul>\n<h3 id=\"Class-VS-Hooks\"><a href=\"#Class-VS-Hooks\" class=\"headerlink\" title=\"Class VS Hooks\"></a>Class VS Hooks</h3><ul>\n<li>虽然 Hooks 看起来更酷炫，更简洁。但是在实际开发中我更倾向于使用 Class 来声明组件。两种方法的对比如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Hooks</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码逻辑清晰（构造函数、componentDidMount 等）</td>\n<td>需要配合变量名和注释</td>\n</tr>\n<tr>\n<td>不容易内存泄漏</td>\n<td>容易发生内存泄漏</td>\n</tr>\n</tbody></table>\n<ul>\n<li>总的来说，Hooks 对代码编写的要求较高，在没有有效机制保证代码可读性、规避风险的情况下，Class 依然是我的首选。关于内存泄漏，下面是一个例子（目前还没找到方法规避这种向全局传递状态更新函数的做法</li>\n</ul>\n<pre><code class=\"React\">import React, { useState } from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\n\nlet func: any;\nsetInterval(() =&gt; {\n  typeof func === &quot;function&quot; &amp;&amp; func(Date.now());\n  console.log(&quot;interval&quot;);\n}, 1000);\n\nfunction App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n  if (typeof func !== &quot;function&quot;) {\n    func = setNum;\n  }\n  return &lt;div&gt;{num}&lt;/div&gt;;\n}\n\nfunction render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n}\n\nrender();</code></pre>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://xin-tan.com/passages/2019-10-21-react-hooks/#%E6%91%98%E8%A6%81\">ReactHooks的原理和实现</a><br><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\">useEffect 完整指南</a><br><a href=\"https://github.com/brickspert/blog/issues/26\">React Hooks 原理</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h3><h4 id=\"当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力\"><a href=\"#当使用Hook特性编写组件的时候-总能感觉到它的简洁和方便-当然-天下没有-免费的午餐-它牺牲了可读性并且存在内存泄漏风险-但这并不妨碍探索它的能力\" class=\"headerlink\" title=\"当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力\"></a>当使用Hook特性编写组件的时候,总能感觉到它的简洁和方便.当然,天下没有{免费的午餐},它牺牲了可读性并且存在内存泄漏风险,但这并不妨碍探索它的能力</h4><h4 id=\"在正式开始前-我打算先提出几个问题-这些问题会在源码实现的过程中-逐步解决\"><a href=\"#在正式开始前-我打算先提出几个问题-这些问题会在源码实现的过程中-逐步解决\" class=\"headerlink\" title=\"在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决\"></a>在正式开始前,我打算先提出几个问题,这些问题会在源码实现的过程中,逐步解决</h4><ul>\n<li>useState 的实现原理</li>\n<li>为什么不能在循环、判断内部使用Hook</li>\n<li>useEffect的实现原理</li>\n<li>useEffect的应用场景</li>\n<li><code>Class</code> vs <code>Hooks</code></li>\n</ul>\n<h4 id=\"以上代码均由TypeScript来实现-文中全部dome均在github中实现\"><a href=\"#以上代码均由TypeScript来实现-文中全部dome均在github中实现\" class=\"headerlink\" title=\"以上代码均由TypeScript来实现,文中全部dome均在github中实现\"></a>以上代码均由TypeScript来实现,文中全部dome均在<a href=\"gist.github.com/dongyuanxin/\">github</a>中实现</h4><h3 id=\"useState的实现原理\"><a href=\"#useState的实现原理\" class=\"headerlink\" title=\"useState的实现原理\"></a>useState的实现原理</h3><ul>\n<li>当调用useState的时候,回返回形如<code>(变量,函数)</code>的一个组件.并且state的初始值就是外部调用useState的时候传入的参数</li>\n<li>理清楚了传参和返回值,再来看下useState还做了些什么.正如下面的代码所示,当点击按钮的时候,执行setNum.状态num被更新,并且UI识图更新.显然,useState翻的用于更改状态的函数,自动调用了<code>render</code> 方法来触发视图更新</li>\n</ul>\n<pre><code class=\"React\">function App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n<li>有了上面的实验,借助一下闭包,封装一个setState如下:</li>\n</ul>\n<pre><code class=\"React\">function render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n}\n\nlet state: any;\n\nfunction useState&lt;T&gt;(initialState: T): [T, (newState: T) =&gt; void] {\n  state = state || initialState;\n\n  function setState(newState: T) {\n    state = newState;\n    render();\n  }\n\n  return [state, setState];\n}\n\nrender(); // 首次渲染</code></pre>\n<ul>\n<li>这是一个简易能用的useState雏形,它也解决了文章开始提到的{useState的实现原理}这个问题,但如果在函数内生命多个state,在当前代码中,只有第一个state 是生效的(请看state=state||initialState)</li>\n</ul>\n<h3 id=\"为什么不能在循环、判断内部使用Hook\"><a href=\"#为什么不能在循环、判断内部使用Hook\" class=\"headerlink\" title=\"为什么不能在循环、判断内部使用Hook\"></a>为什么不能在循环、判断内部使用Hook</h3><ul>\n<li>先不要考虑题目提及的问题.思路还是回到如何让useState支持多个state.React Hook 看起来非常 Magic 的实现，本质上还是通过 Array 来实现的</li>\n<li>前面 useState 的简单实现里，初始的状态是保存在一个全局变量中的。以此类推，多个状态，应该是保存在一个专门的全局容器中。这个容器，就是一个朴实无华的 Array 对象。具体过程如下：</li>\n</ul>\n<ol>\n<li>第一次渲染时候，根据 useState 顺序，逐个声明 state 并且将其放入全局 Array 中。每次声明 state，都要将 cursor 增加 1。</li>\n<li>更新 state，触发再次渲染的时候。cursor 被重置为 0。按照 useState 的声明顺序，依次拿出最新的 state 的值，视图更新。</li>\n</ol>\n<ul>\n<li>请看下面这张图，每次使用 useState，都会向 STATE 容器中添加新的状态。</li>\n</ul>\n<pre><code class=\"React\">import React from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\n\nconst states: any[] = [];\nlet cursor: number = 0;\n\nfunction useState&lt;T&gt;(initialState: T): [T, (newState: T) =&gt; void] {\n  const currenCursor = cursor;\n  states[currenCursor] = states[currenCursor] || initialState; // 检查是否渲染过\n\n  function setState(newState: T) {\n    states[currenCursor] = newState;\n    render();\n  }\n\n  ++cursor; // update: cursor\n  return [states[currenCursor], setState];\n}\n\nfunction App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n  const [num2, setNum2] = useState &lt; number &gt; 1;\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;hr /&gt;\n      &lt;div&gt;num2: {num2}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 * 2)}&gt;扩大一倍&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 / 2)}&gt;缩小一倍&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n  cursor = 0; // 重置cursor\n}\n\nrender(); // 首次渲染\n</code></pre>\n<ul>\n<li>此时，如果想在循环、判断等不在函数组件顶部的地方使用 Hook，如下所示：</li>\n</ul>\n<pre><code class=\"React\">let tag = true;\n\nfunction App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n\n  // 只有初次渲染，才执行\n  if (tag) {\n    const [unusedNum] = useState &lt; number &gt; 1;\n    tag = false;\n  }\n\n  const [num2, setNum2] = useState &lt; number &gt; 2;\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;hr /&gt;\n      &lt;div&gt;num2: {num2}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 * 2)}&gt;扩大一倍&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum2(num2 / 2)}&gt;缩小一倍&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n<li>由于在条件判断的逻辑中，重置了tag=false，因此此后的渲染不会再进入条件判断语句。看起来好像没有问题？但是，由于 useState 是基于 Array+Cursor 来实现的，第一次渲染时候，state 和 cursor 的对应关系如下表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量名</th>\n<th>Cursor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>num</td>\n<td>0</td>\n</tr>\n<tr>\n<td>unusedNum</td>\n<td>1</td>\n</tr>\n<tr>\n<td>num2</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<ul>\n<li>当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用</li>\n<li>当点击事件触发再次渲染，并不会进入条件判断中的 useState。所以，cursor=2 的时候对应的变量是 num2。而其实 num2 对应的 cursor 应该是 3。就会导致setNum2并不起作用</li>\n</ul>\n<h3 id=\"useEffect-的实现原理\"><a href=\"#useEffect-的实现原理\" class=\"headerlink\" title=\"useEffect 的实现原理\"></a>useEffect 的实现原理</h3><ul>\n<li>在探索 useEffect 原理的时候，一直被一个问题困扰：useEffect 作用和用途是什么？当然，用于函数的副作用这句话谁都会讲。举个例子吧</li>\n</ul>\n<pre><code class=\"React\">function App() {\n  const [num, setNum] = useState(0);\n\n  useEffect(() =&gt; {\n    // 模拟异步请求后端数据\n    setTimeout(() =&gt; {\n      setNum(num + 1);\n    }, 1000);\n  }, []);\n\n  return &lt;div&gt;{!num ? &quot;请求后端数据...&quot; : `后端数据是 ${num}`}&lt;/div&gt;;\n}</code></pre>\n<ul>\n<li>这段代码，虽然这样组织可读性更高，毕竟可以将这个请求理解为函数的副作用。但这并不是必要的。完全可以不使用useEffect，直接使用setTimeout，并且它的回调函数中更新函数组件的 state</li>\n<li>在阅读A Complete Guide to useEffect和构建你自己的 Hooks之后，我才理解 useEffect 的存在的必要性和意义</li>\n<li>在 useEffect 的第二个参数中，我们可以指定一个数组，如果下次渲染时，数组中的元素没变，那么就不会触发这个副作用（可以类比 Class 类的关于 nextprops 和 prevProps 的生命周期）。好处显然易见，相比于直接裸写在函数组件顶层，useEffect 能根据需要，避免多余的 render</li>\n<li>下面是一个不包括销毁副作用功能的 useEffect 的 TypeScript 实现</li>\n</ul>\n<pre><code class=\"React\">// 还是利用 Array + Cursor的思路\nconst allDeps: any[][] = [];\nlet effectCursor: number = 0;\n\nfunction useEffect(callback: () =&gt; void, deps: any[]) {\n  if (!allDeps[effectCursor]) {\n    // 初次渲染：赋值 + 调用回调函数\n    allDeps[effectCursor] = deps;\n    ++effectCursor;\n    callback();\n    return;\n  }\n\n  const currenEffectCursor = effectCursor;\n  const rawDeps = allDeps[currenEffectCursor];\n  // 检测依赖项是否发生变化，发生变化需要重新render\n  const isChanged = rawDeps.some(\n    (dep: any, index: number) =&gt; dep !== deps[index]\n  );\n  if (isChanged) {\n    callback();\n  }\n  ++effectCursor;\n}\n\nfunction render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n  effectCursor = 0; // 注意将 effectCursor 重置为0\n}</code></pre>\n<ul>\n<li>对于 useEffect 的实现，配合下面案例的使用会更容易理解。当然，你也可以在这个 useEffect 中发起异步请求，并在接受数据后，调用 state 的更新函数，不会发生爆栈的情况</li>\n</ul>\n<pre><code class=\"React\">function App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n  const [num2] = useState &lt; number &gt; 1;\n\n  // 多次触发\n  // 每次点击按钮，都会触发 setNum 函数\n  // 副作用检测到 num 变化，会自动调用回调函数\n  useEffect(() =&gt; {\n    console.log(&quot;num update: &quot;, num);\n  }, [num]);\n\n  // 仅第一次触发\n  // 只会在compoentDidMount时，触发一次\n  // 副作用函数不会多次执行\n  useEffect(() =&gt; {\n    console.log(&quot;num2 update: &quot;, num2);\n  }, [num2]);\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;num: {num}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;button onClick={() =&gt; setNum(num + 1)}&gt;加 1&lt;/button&gt;\n        &lt;button onClick={() =&gt; setNum(num - 1)}&gt;减 1&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<ul>\n<li>useEffect 第一个回调函数可以返回一个用于销毁副作用的函数，相当于 Class 组件的 unmount 生命周期。这里为了方便说明，没有进行实现</li>\n<li>在这一小节中，尝试解答了 「🤔️ useEffect 的实现原理」和 「🤔️ useEffect 的应用场景」这两个问题</li>\n</ul>\n<h3 id=\"Class-VS-Hooks\"><a href=\"#Class-VS-Hooks\" class=\"headerlink\" title=\"Class VS Hooks\"></a>Class VS Hooks</h3><ul>\n<li>虽然 Hooks 看起来更酷炫，更简洁。但是在实际开发中我更倾向于使用 Class 来声明组件。两种方法的对比如下</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Hooks</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>代码逻辑清晰（构造函数、componentDidMount 等）</td>\n<td>需要配合变量名和注释</td>\n</tr>\n<tr>\n<td>不容易内存泄漏</td>\n<td>容易发生内存泄漏</td>\n</tr>\n</tbody></table>\n<ul>\n<li>总的来说，Hooks 对代码编写的要求较高，在没有有效机制保证代码可读性、规避风险的情况下，Class 依然是我的首选。关于内存泄漏，下面是一个例子（目前还没找到方法规避这种向全局传递状态更新函数的做法</li>\n</ul>\n<pre><code class=\"React\">import React, { useState } from &quot;react&quot;;\nimport ReactDOM from &quot;react-dom&quot;;\n\nlet func: any;\nsetInterval(() =&gt; {\n  typeof func === &quot;function&quot; &amp;&amp; func(Date.now());\n  console.log(&quot;interval&quot;);\n}, 1000);\n\nfunction App() {\n  const [num, setNum] = useState &lt; number &gt; 0;\n  if (typeof func !== &quot;function&quot;) {\n    func = setNum;\n  }\n  return &lt;div&gt;{num}&lt;/div&gt;;\n}\n\nfunction render() {\n  ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));\n}\n\nrender();</code></pre>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://xin-tan.com/passages/2019-10-21-react-hooks/#%E6%91%98%E8%A6%81\">ReactHooks的原理和实现</a><br><a href=\"https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\">useEffect 完整指南</a><br><a href=\"https://github.com/brickspert/blog/issues/26\">React Hooks 原理</a></p>\n"},{"title":"流程图","abstract":"这是一篇加密的文章。","message":"enter password to read.","date":"2019-11-17T17:19:51.000Z","_content":"\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:51:43\n * @Description: file content\n -->\n\n## 流程图-基本语法\n\n### 这声明了一个从上到下（TD或TB）定向的图形\n\n``` bash\ngraph TD\n    Start --> Stop\n\n```\n\n``` mermaid\ngraph TD\n    Start --> Stop\n\n```\n\n### 这声明了一个从左到右的图（LR）\n\n``` bash\ngraph LR\n    Start --> Stop\n\n```\n\n``` mermaid\ngraph LR\n    Start --> Stop\n\n```\n\n- 可能的方向是：\n\n1. TB-顶底\n\n2. BT-底部顶部\n\n3. RL-右左\n\n4. LR-左右\n\n5. TD-与TB相同\n\n### 节点和形状\n\n### 节点（默认）\n\n``` bash\ngraph LR\n    id\n\n```\n\n``` mermaid\ngraph LR\n    id\n\n```\n\n请注意，id是框中显示的ID。\n\n### 带有文本的节点\n\n``` bash\ngraph LR\n    id1[This is the text in the box]\n\n```\n\n``` mermaid\ngraph LR\n    id1[This is the text in the box]\n\n```\n\n也可以在不同于ID的框中设置文本。如果多次执行此操作，则这是将要使用的节点的最后一个文本。同样，如果稍后定义节点的边缘，则可以省略文本定义。渲染框时将使用先前定义的那个。\n\n### 具有圆边的节点\n\n``` bash\ngraph LR\n    id1(This is the text in the box)\n\n```\n\n``` mermaid\ngraph LR\n    id1(This is the text in the box)\n\n```\n\n### 圆形式的节点\n\n``` bash\ngraph LR\n    id1((This is the text in the circle))\n\n```\n\n``` mermaid\ngraph LR\n    id1((This is the text in the circle))\n\n```\n\n### 非对称形状的节点\n\n``` bash\ngraph LR\n    id1>This is the text in the box]\n\n```\n\n``` mermaid\ngraph LR\n    id1>This is the text in the box]\n\n```\n\n当前，只有上面的形状是可能的，而不是它的镜子。这可能会随着将来的版本而改变。\n\n### 一个节点（菱形）\n\n``` bash\ngraph LR\n    id1{This is the text in the box}\n\n```\n\n``` mermaid\ngraph LR\n    id1{This is the text in the box}\n\n```\n\n### 梯形\n\n``` bash\ngraph TD\n    A[/Christmas\\]\n\n```\n\n``` mermaid\ngraph TD\n    A[/Christmas\\]\n\n```\n\n### 梯形alt\n\n``` bash\ngraph TD\n    B[\\Go shopping/]\n\n```\n\n``` mermaid\ngraph TD\n    B[\\Go shopping/]\n\n```\n\n### 节点之间的链接\n\n节点可以通过链接/边缘连接。可以具有不同类型的链接，也可以将文本字符串附加到链接。\n\n### 箭头链接\n\n``` bash\ngraph LR\n    A-->B\n\n```\n\n``` mermaid\ngraph LR\n    A-->B\n\n```\n\n### 一个开放的链接\n\n``` bash\ngraph LR\n    A --- B\n\n```\n\n``` mermaid\ngraph LR\n    A --- B\n\n```\n\n### 链接上的文字\n\n``` bash\ngraph LR\n    A-- This is the text ---B\n\n```\n\n``` mermaid\ngraph LR\n    A-- This is the text ---B\n\n```\n\n或者\n\n```bash\ngraph LR\n    A---|This is the text|B\n\n```\n\n### 带有箭头和文字的链接\n\n``` bash\ngraph LR\n    A-->|text|B\n\n```\n\n``` mermaid\ngraph LR\n    A-->|text|B\n\n```\n\n或者\n\n```base\ngraph LR\n    A-- text -->B\n\n```\n\n### 虚线链接\n\n``` bash\ngraph LR;\n   A-.->B;\n\n```\n\n``` mermaid\ngraph LR;\n   A-.->B;\n\n```\n\n### 带文字的虚线链接\n\n``` bash\ngraph LR\n   A-. text .-> B\n\n```\n\n``` mermaid\ngraph LR\n   A-. text .-> B\n\n```\n\n### 粗链接\n\n``` bash\ngraph LR\n   A ==> B\n\n```\n\n``` mermaid\ngraph LR\n   A ==> B\n\n```\n\n### 带有文字的粗链接\n\n``` bash\ngraph LR\n   A == text ==> B\n\n```\n\n``` mermaid\ngraph LR\n   A == text ==> B\n\n```\n\n### 链接链接\n\n可以按如下所示在同一行中声明许多链接：\n\n``` bash\ngraph LR\n   A -- text --> B -- text2 --> C\n\n```\n\n``` mermaid\ngraph LR\n   A -- text --> B -- text2 --> C\n\n```\n\n### 破坏语法的特殊字符\n\n``` bash\ngraph LR\n    id1[\"This is the (text) in the box\"]\n\n```\n\n``` mermaid\ngraph LR\n    id1[\"This is the (text) in the box\"]\n\n```\n\n### 实体代码以转义字符\n\n``` bash\ngraph LR\n    A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]\n\n```\n\n``` mermaid\ngraph LR\n    A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]\n\n```\n\n### 子图\n\n```bash\nsubgraph title\n    graph definition\nend\n```\n\n### 子图案例\n\n``` bash\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n``` mermaid\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n### 相互作用\n\n可以将click事件绑定到节点，单击可能导致JavaScript回调或链接，该链接将在新的浏览器选项卡中打开。注意：使用securityLevel='strict'时将禁用此功能，使用时将启用securityLevel='loose'。\n\n``` bash\nclick nodeId callback\n\n```\n\n- nodeId是节点的ID\n- callback是在显示图形的页面上定义的javascript函数的名称，该函数将使用nodeId作为参数来调用。\n以下是工具提示用法的示例：\n\n``` bash\n<script>\n    var callback = function(){\n        alert('A callback was triggered');\n    }\n<script>\n\n```\n\n工具提示文本用双引号引起来。工具提示的样式由.mermaidTooltip类设置。\n\n``` mermaid\ngraph LR;\n    A-->B;\n    click A callback \"Tooltip for a callback\"\n    click B \"http://www.github.com\" \"This is a tooltip for a link\"\n\n```\n\n``` bash\ngraph LR;\n    A-->B;\n    click A callback \"Tooltip for a callback\"\n    click B \"http://www.github.com\" \"This is a tooltip for a link\"\n\n```\n\n### 样式节点链接\n\n### 样式链接\n可以设置链接样式。例如，您可能想要设置在流程中向后移动的链接的样式。由于链接没有ID的方式与节点相同，因此需要某种其他方式来确定链接应附加到的样式。在图表中定义链接时使用的订单号代替id。在下面的示例中，linkStyle语句中定义的样式将属于图中的第四个链接：\n\n```bash\nlinkStyle 3 stroke:#ff3,stroke-width:4px;\n\n\n```\n\n### 设置节点样式\n\n可以将特定样式（例如，较粗的边框或不同的背景颜色）应用于节点。\n\n``` bash\ngraph LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\n\n\n```\n\n``` mermaid\ngraph LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\n\n\n```\n\n### 班级\n\n每次定义样式时，更方便的方法是定义一类样式，并将该类附加到应具有不同外观的节点上。\n\n类定义如下例所示：\n\n``` bash\nclassDef className fill:#f9f,stroke:#333,stroke-width:4px;\n\n```\n\n将类附加到节点的操作如下:\n\n``` bash\nclass nodeId1 className;\n\n```\n\n也可以在一个语句中将类附加到节点列表：\n\n``` bash\nclass nodeId1,nodeId2 className;\n\n```\n\n### CSS类\n\n也可以以css样式预定义可从图形定义中应用的类，如下例所示：\n\n示例样式:\n\n```bash\n<style>\n    .cssClass > rect{\n        fill:#FF0000;\n        stroke:#FFFF00;\n        stroke-width:4px;\n    }\n</style>\n\n```\n\n示例定义:\n\n``` bash\ngraph LR;\n    A-->B[AAA<span>BBB</span>];\n    B-->D;\n    class A cssClass;\n\n```\n\n``` mermaid\ngraph LR;\n    A-->B[AAA<span>BBB</span>];\n    B-->D;\n    class A cssClass;\n\n```\n\n### 默认类\n\n如果一个类被命名为default，它将被分配给所有没有特定类定义的类。\n\n``` bash\nclassDef default fill:#f9f,stroke:#333,stroke-width:4px;\n\n```\n\n### 基本支持fontawesome\n\n可以从fontawesome添加图标。\n\n通过语法fa：#icon类名＃来访问图标。\n\n``` bash\ngraph TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?);\n\n```\n\n``` mermaid\ngraph TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?);\n\n```\n\n### 图的声明在顶点和链接之间有空格，并且没有分号\n\n- 在图形声明中，语句现在也可以不使用分号结束。在0.2.16版本之后，以分号结束图语句只是可选的。因此，下面的图声明与图的旧声明同样有效。\n\n- 顶点和链接之间只能有一个空格。但是，顶点和其文本以及链接和其文本之间不应有任何空格。图形声明的旧语法也将起作用，因此，此新功能是可选的，旨在提高可读性。\n\n以下是图边缘的新声明，该声明与图边缘的旧声明同样有效。\n\n``` bash\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n\n```\n\n``` mermaid\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n\n```\n\n### 组态\n\n是否可以调整渲染流程图的宽度。\n\n这是通过定义mermaid.flowchartConfig或通过CLI在配置中使用json文件来完成的。mermaidCLI页面中描述了如何使用CLI。可以将mermaid.flowchartConfig设置为带有配置参数或相应对象的JSON字符串。\n","source":"_posts/test/流程图.md","raw":"---\ntitle: 流程图\n\ntags: frist\ncategories: web\n# password: 123456\nabstract: 这是一篇加密的文章。\nmessage: enter password to read.\ndate: 2019-11-18 01:19:51\n---\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:51:43\n * @Description: file content\n -->\n\n## 流程图-基本语法\n\n### 这声明了一个从上到下（TD或TB）定向的图形\n\n``` bash\ngraph TD\n    Start --> Stop\n\n```\n\n``` mermaid\ngraph TD\n    Start --> Stop\n\n```\n\n### 这声明了一个从左到右的图（LR）\n\n``` bash\ngraph LR\n    Start --> Stop\n\n```\n\n``` mermaid\ngraph LR\n    Start --> Stop\n\n```\n\n- 可能的方向是：\n\n1. TB-顶底\n\n2. BT-底部顶部\n\n3. RL-右左\n\n4. LR-左右\n\n5. TD-与TB相同\n\n### 节点和形状\n\n### 节点（默认）\n\n``` bash\ngraph LR\n    id\n\n```\n\n``` mermaid\ngraph LR\n    id\n\n```\n\n请注意，id是框中显示的ID。\n\n### 带有文本的节点\n\n``` bash\ngraph LR\n    id1[This is the text in the box]\n\n```\n\n``` mermaid\ngraph LR\n    id1[This is the text in the box]\n\n```\n\n也可以在不同于ID的框中设置文本。如果多次执行此操作，则这是将要使用的节点的最后一个文本。同样，如果稍后定义节点的边缘，则可以省略文本定义。渲染框时将使用先前定义的那个。\n\n### 具有圆边的节点\n\n``` bash\ngraph LR\n    id1(This is the text in the box)\n\n```\n\n``` mermaid\ngraph LR\n    id1(This is the text in the box)\n\n```\n\n### 圆形式的节点\n\n``` bash\ngraph LR\n    id1((This is the text in the circle))\n\n```\n\n``` mermaid\ngraph LR\n    id1((This is the text in the circle))\n\n```\n\n### 非对称形状的节点\n\n``` bash\ngraph LR\n    id1>This is the text in the box]\n\n```\n\n``` mermaid\ngraph LR\n    id1>This is the text in the box]\n\n```\n\n当前，只有上面的形状是可能的，而不是它的镜子。这可能会随着将来的版本而改变。\n\n### 一个节点（菱形）\n\n``` bash\ngraph LR\n    id1{This is the text in the box}\n\n```\n\n``` mermaid\ngraph LR\n    id1{This is the text in the box}\n\n```\n\n### 梯形\n\n``` bash\ngraph TD\n    A[/Christmas\\]\n\n```\n\n``` mermaid\ngraph TD\n    A[/Christmas\\]\n\n```\n\n### 梯形alt\n\n``` bash\ngraph TD\n    B[\\Go shopping/]\n\n```\n\n``` mermaid\ngraph TD\n    B[\\Go shopping/]\n\n```\n\n### 节点之间的链接\n\n节点可以通过链接/边缘连接。可以具有不同类型的链接，也可以将文本字符串附加到链接。\n\n### 箭头链接\n\n``` bash\ngraph LR\n    A-->B\n\n```\n\n``` mermaid\ngraph LR\n    A-->B\n\n```\n\n### 一个开放的链接\n\n``` bash\ngraph LR\n    A --- B\n\n```\n\n``` mermaid\ngraph LR\n    A --- B\n\n```\n\n### 链接上的文字\n\n``` bash\ngraph LR\n    A-- This is the text ---B\n\n```\n\n``` mermaid\ngraph LR\n    A-- This is the text ---B\n\n```\n\n或者\n\n```bash\ngraph LR\n    A---|This is the text|B\n\n```\n\n### 带有箭头和文字的链接\n\n``` bash\ngraph LR\n    A-->|text|B\n\n```\n\n``` mermaid\ngraph LR\n    A-->|text|B\n\n```\n\n或者\n\n```base\ngraph LR\n    A-- text -->B\n\n```\n\n### 虚线链接\n\n``` bash\ngraph LR;\n   A-.->B;\n\n```\n\n``` mermaid\ngraph LR;\n   A-.->B;\n\n```\n\n### 带文字的虚线链接\n\n``` bash\ngraph LR\n   A-. text .-> B\n\n```\n\n``` mermaid\ngraph LR\n   A-. text .-> B\n\n```\n\n### 粗链接\n\n``` bash\ngraph LR\n   A ==> B\n\n```\n\n``` mermaid\ngraph LR\n   A ==> B\n\n```\n\n### 带有文字的粗链接\n\n``` bash\ngraph LR\n   A == text ==> B\n\n```\n\n``` mermaid\ngraph LR\n   A == text ==> B\n\n```\n\n### 链接链接\n\n可以按如下所示在同一行中声明许多链接：\n\n``` bash\ngraph LR\n   A -- text --> B -- text2 --> C\n\n```\n\n``` mermaid\ngraph LR\n   A -- text --> B -- text2 --> C\n\n```\n\n### 破坏语法的特殊字符\n\n``` bash\ngraph LR\n    id1[\"This is the (text) in the box\"]\n\n```\n\n``` mermaid\ngraph LR\n    id1[\"This is the (text) in the box\"]\n\n```\n\n### 实体代码以转义字符\n\n``` bash\ngraph LR\n    A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]\n\n```\n\n``` mermaid\ngraph LR\n    A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]\n\n```\n\n### 子图\n\n```bash\nsubgraph title\n    graph definition\nend\n```\n\n### 子图案例\n\n``` bash\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n``` mermaid\ngraph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end\n\n```\n\n### 相互作用\n\n可以将click事件绑定到节点，单击可能导致JavaScript回调或链接，该链接将在新的浏览器选项卡中打开。注意：使用securityLevel='strict'时将禁用此功能，使用时将启用securityLevel='loose'。\n\n``` bash\nclick nodeId callback\n\n```\n\n- nodeId是节点的ID\n- callback是在显示图形的页面上定义的javascript函数的名称，该函数将使用nodeId作为参数来调用。\n以下是工具提示用法的示例：\n\n``` bash\n<script>\n    var callback = function(){\n        alert('A callback was triggered');\n    }\n<script>\n\n```\n\n工具提示文本用双引号引起来。工具提示的样式由.mermaidTooltip类设置。\n\n``` mermaid\ngraph LR;\n    A-->B;\n    click A callback \"Tooltip for a callback\"\n    click B \"http://www.github.com\" \"This is a tooltip for a link\"\n\n```\n\n``` bash\ngraph LR;\n    A-->B;\n    click A callback \"Tooltip for a callback\"\n    click B \"http://www.github.com\" \"This is a tooltip for a link\"\n\n```\n\n### 样式节点链接\n\n### 样式链接\n可以设置链接样式。例如，您可能想要设置在流程中向后移动的链接的样式。由于链接没有ID的方式与节点相同，因此需要某种其他方式来确定链接应附加到的样式。在图表中定义链接时使用的订单号代替id。在下面的示例中，linkStyle语句中定义的样式将属于图中的第四个链接：\n\n```bash\nlinkStyle 3 stroke:#ff3,stroke-width:4px;\n\n\n```\n\n### 设置节点样式\n\n可以将特定样式（例如，较粗的边框或不同的背景颜色）应用于节点。\n\n``` bash\ngraph LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\n\n\n```\n\n``` mermaid\ngraph LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\n\n\n```\n\n### 班级\n\n每次定义样式时，更方便的方法是定义一类样式，并将该类附加到应具有不同外观的节点上。\n\n类定义如下例所示：\n\n``` bash\nclassDef className fill:#f9f,stroke:#333,stroke-width:4px;\n\n```\n\n将类附加到节点的操作如下:\n\n``` bash\nclass nodeId1 className;\n\n```\n\n也可以在一个语句中将类附加到节点列表：\n\n``` bash\nclass nodeId1,nodeId2 className;\n\n```\n\n### CSS类\n\n也可以以css样式预定义可从图形定义中应用的类，如下例所示：\n\n示例样式:\n\n```bash\n<style>\n    .cssClass > rect{\n        fill:#FF0000;\n        stroke:#FFFF00;\n        stroke-width:4px;\n    }\n</style>\n\n```\n\n示例定义:\n\n``` bash\ngraph LR;\n    A-->B[AAA<span>BBB</span>];\n    B-->D;\n    class A cssClass;\n\n```\n\n``` mermaid\ngraph LR;\n    A-->B[AAA<span>BBB</span>];\n    B-->D;\n    class A cssClass;\n\n```\n\n### 默认类\n\n如果一个类被命名为default，它将被分配给所有没有特定类定义的类。\n\n``` bash\nclassDef default fill:#f9f,stroke:#333,stroke-width:4px;\n\n```\n\n### 基本支持fontawesome\n\n可以从fontawesome添加图标。\n\n通过语法fa：#icon类名＃来访问图标。\n\n``` bash\ngraph TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?);\n\n```\n\n``` mermaid\ngraph TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?);\n\n```\n\n### 图的声明在顶点和链接之间有空格，并且没有分号\n\n- 在图形声明中，语句现在也可以不使用分号结束。在0.2.16版本之后，以分号结束图语句只是可选的。因此，下面的图声明与图的旧声明同样有效。\n\n- 顶点和链接之间只能有一个空格。但是，顶点和其文本以及链接和其文本之间不应有任何空格。图形声明的旧语法也将起作用，因此，此新功能是可选的，旨在提高可读性。\n\n以下是图边缘的新声明，该声明与图边缘的旧声明同样有效。\n\n``` bash\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n\n```\n\n``` mermaid\ngraph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]\n\n```\n\n### 组态\n\n是否可以调整渲染流程图的宽度。\n\n这是通过定义mermaid.flowchartConfig或通过CLI在配置中使用json文件来完成的。mermaidCLI页面中描述了如何使用CLI。可以将mermaid.flowchartConfig设置为带有配置参数或相应对象的JSON字符串。\n","slug":"test/流程图","published":1,"updated":"2020-10-19T04:06:49.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23ao10009x9r3elhsfliq","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:51:43\n * @Description: file content\n -->\n\n<h2 id=\"流程图-基本语法\"><a href=\"#流程图-基本语法\" class=\"headerlink\" title=\"流程图-基本语法\"></a>流程图-基本语法</h2><h3 id=\"这声明了一个从上到下（TD或TB）定向的图形\"><a href=\"#这声明了一个从上到下（TD或TB）定向的图形\" class=\"headerlink\" title=\"这声明了一个从上到下（TD或TB）定向的图形\"></a>这声明了一个从上到下（TD或TB）定向的图形</h3><pre><code class=\"bash\">graph TD\n    Start --&gt; Stop\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    Start --> Stop</pre>\n\n<h3 id=\"这声明了一个从左到右的图（LR）\"><a href=\"#这声明了一个从左到右的图（LR）\" class=\"headerlink\" title=\"这声明了一个从左到右的图（LR）\"></a>这声明了一个从左到右的图（LR）</h3><pre><code class=\"bash\">graph LR\n    Start --&gt; Stop\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    Start --> Stop</pre>\n\n<ul>\n<li>可能的方向是：</li>\n</ul>\n<ol>\n<li><p>TB-顶底</p>\n</li>\n<li><p>BT-底部顶部</p>\n</li>\n<li><p>RL-右左</p>\n</li>\n<li><p>LR-左右</p>\n</li>\n<li><p>TD-与TB相同</p>\n</li>\n</ol>\n<h3 id=\"节点和形状\"><a href=\"#节点和形状\" class=\"headerlink\" title=\"节点和形状\"></a>节点和形状</h3><h3 id=\"节点（默认）\"><a href=\"#节点（默认）\" class=\"headerlink\" title=\"节点（默认）\"></a>节点（默认）</h3><pre><code class=\"bash\">graph LR\n    id\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id</pre>\n\n<p>请注意，id是框中显示的ID。</p>\n<h3 id=\"带有文本的节点\"><a href=\"#带有文本的节点\" class=\"headerlink\" title=\"带有文本的节点\"></a>带有文本的节点</h3><pre><code class=\"bash\">graph LR\n    id1[This is the text in the box]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1[This is the text in the box]</pre>\n\n<p>也可以在不同于ID的框中设置文本。如果多次执行此操作，则这是将要使用的节点的最后一个文本。同样，如果稍后定义节点的边缘，则可以省略文本定义。渲染框时将使用先前定义的那个。</p>\n<h3 id=\"具有圆边的节点\"><a href=\"#具有圆边的节点\" class=\"headerlink\" title=\"具有圆边的节点\"></a>具有圆边的节点</h3><pre><code class=\"bash\">graph LR\n    id1(This is the text in the box)\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1(This is the text in the box)</pre>\n\n<h3 id=\"圆形式的节点\"><a href=\"#圆形式的节点\" class=\"headerlink\" title=\"圆形式的节点\"></a>圆形式的节点</h3><pre><code class=\"bash\">graph LR\n    id1((This is the text in the circle))\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1((This is the text in the circle))</pre>\n\n<h3 id=\"非对称形状的节点\"><a href=\"#非对称形状的节点\" class=\"headerlink\" title=\"非对称形状的节点\"></a>非对称形状的节点</h3><pre><code class=\"bash\">graph LR\n    id1&gt;This is the text in the box]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1>This is the text in the box]</pre>\n\n<p>当前，只有上面的形状是可能的，而不是它的镜子。这可能会随着将来的版本而改变。</p>\n<h3 id=\"一个节点（菱形）\"><a href=\"#一个节点（菱形）\" class=\"headerlink\" title=\"一个节点（菱形）\"></a>一个节点（菱形）</h3><pre><code class=\"bash\">graph LR\n    id1{This is the text in the box}\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1{This is the text in the box}</pre>\n\n<h3 id=\"梯形\"><a href=\"#梯形\" class=\"headerlink\" title=\"梯形\"></a>梯形</h3><pre><code class=\"bash\">graph TD\n    A[/Christmas\\]\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    A[/Christmas\\]</pre>\n\n<h3 id=\"梯形alt\"><a href=\"#梯形alt\" class=\"headerlink\" title=\"梯形alt\"></a>梯形alt</h3><pre><code class=\"bash\">graph TD\n    B[\\Go shopping/]\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    B[\\Go shopping/]</pre>\n\n<h3 id=\"节点之间的链接\"><a href=\"#节点之间的链接\" class=\"headerlink\" title=\"节点之间的链接\"></a>节点之间的链接</h3><p>节点可以通过链接/边缘连接。可以具有不同类型的链接，也可以将文本字符串附加到链接。</p>\n<h3 id=\"箭头链接\"><a href=\"#箭头链接\" class=\"headerlink\" title=\"箭头链接\"></a>箭头链接</h3><pre><code class=\"bash\">graph LR\n    A--&gt;B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A-->B</pre>\n\n<h3 id=\"一个开放的链接\"><a href=\"#一个开放的链接\" class=\"headerlink\" title=\"一个开放的链接\"></a>一个开放的链接</h3><pre><code class=\"bash\">graph LR\n    A --- B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A --- B</pre>\n\n<h3 id=\"链接上的文字\"><a href=\"#链接上的文字\" class=\"headerlink\" title=\"链接上的文字\"></a>链接上的文字</h3><pre><code class=\"bash\">graph LR\n    A-- This is the text ---B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A-- This is the text ---B</pre>\n\n<p>或者</p>\n<pre><code class=\"bash\">graph LR\n    A---|This is the text|B\n</code></pre>\n<h3 id=\"带有箭头和文字的链接\"><a href=\"#带有箭头和文字的链接\" class=\"headerlink\" title=\"带有箭头和文字的链接\"></a>带有箭头和文字的链接</h3><pre><code class=\"bash\">graph LR\n    A--&gt;|text|B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A-->|text|B</pre>\n\n<p>或者</p>\n<pre><code class=\"base\">graph LR\n    A-- text --&gt;B\n</code></pre>\n<h3 id=\"虚线链接\"><a href=\"#虚线链接\" class=\"headerlink\" title=\"虚线链接\"></a>虚线链接</h3><pre><code class=\"bash\">graph LR;\n   A-.-&gt;B;\n</code></pre>\n<pre class=\"mermaid\">graph LR;\n   A-.->B;</pre>\n\n<h3 id=\"带文字的虚线链接\"><a href=\"#带文字的虚线链接\" class=\"headerlink\" title=\"带文字的虚线链接\"></a>带文字的虚线链接</h3><pre><code class=\"bash\">graph LR\n   A-. text .-&gt; B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A-. text .-> B</pre>\n\n<h3 id=\"粗链接\"><a href=\"#粗链接\" class=\"headerlink\" title=\"粗链接\"></a>粗链接</h3><pre><code class=\"bash\">graph LR\n   A ==&gt; B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A ==> B</pre>\n\n<h3 id=\"带有文字的粗链接\"><a href=\"#带有文字的粗链接\" class=\"headerlink\" title=\"带有文字的粗链接\"></a>带有文字的粗链接</h3><pre><code class=\"bash\">graph LR\n   A == text ==&gt; B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A == text ==> B</pre>\n\n<h3 id=\"链接链接\"><a href=\"#链接链接\" class=\"headerlink\" title=\"链接链接\"></a>链接链接</h3><p>可以按如下所示在同一行中声明许多链接：</p>\n<pre><code class=\"bash\">graph LR\n   A -- text --&gt; B -- text2 --&gt; C\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A -- text --> B -- text2 --> C</pre>\n\n<h3 id=\"破坏语法的特殊字符\"><a href=\"#破坏语法的特殊字符\" class=\"headerlink\" title=\"破坏语法的特殊字符\"></a>破坏语法的特殊字符</h3><pre><code class=\"bash\">graph LR\n    id1[&quot;This is the (text) in the box&quot;]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1[\"This is the (text) in the box\"]</pre>\n\n<h3 id=\"实体代码以转义字符\"><a href=\"#实体代码以转义字符\" class=\"headerlink\" title=\"实体代码以转义字符\"></a>实体代码以转义字符</h3><pre><code class=\"bash\">graph LR\n    A[&quot;A double quote:#quot;&quot;] --&gt;B[&quot;A dec char:#9829;&quot;]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]</pre>\n\n<h3 id=\"子图\"><a href=\"#子图\" class=\"headerlink\" title=\"子图\"></a>子图</h3><pre><code class=\"bash\">subgraph title\n    graph definition\nend</code></pre>\n<h3 id=\"子图案例\"><a href=\"#子图案例\" class=\"headerlink\" title=\"子图案例\"></a>子图案例</h3><pre><code class=\"bash\">graph TB\n    c1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n</code></pre>\n<pre class=\"mermaid\">graph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end</pre>\n\n<h3 id=\"相互作用\"><a href=\"#相互作用\" class=\"headerlink\" title=\"相互作用\"></a>相互作用</h3><p>可以将click事件绑定到节点，单击可能导致JavaScript回调或链接，该链接将在新的浏览器选项卡中打开。注意：使用securityLevel=’strict’时将禁用此功能，使用时将启用securityLevel=’loose’。</p>\n<pre><code class=\"bash\">click nodeId callback\n</code></pre>\n<ul>\n<li>nodeId是节点的ID</li>\n<li>callback是在显示图形的页面上定义的javascript函数的名称，该函数将使用nodeId作为参数来调用。<br>以下是工具提示用法的示例：</li>\n</ul>\n<pre><code class=\"bash\">&lt;script&gt;\n    var callback = function(){\n        alert(&#39;A callback was triggered&#39;);\n    }\n&lt;script&gt;\n</code></pre>\n<p>工具提示文本用双引号引起来。工具提示的样式由.mermaidTooltip类设置。</p>\n<pre class=\"mermaid\">graph LR;\n    A-->B;\n    click A callback \"Tooltip for a callback\"\n    click B \"http://www.github.com\" \"This is a tooltip for a link\"</pre>\n\n<pre><code class=\"bash\">graph LR;\n    A--&gt;B;\n    click A callback &quot;Tooltip for a callback&quot;\n    click B &quot;http://www.github.com&quot; &quot;This is a tooltip for a link&quot;\n</code></pre>\n<h3 id=\"样式节点链接\"><a href=\"#样式节点链接\" class=\"headerlink\" title=\"样式节点链接\"></a>样式节点链接</h3><h3 id=\"样式链接\"><a href=\"#样式链接\" class=\"headerlink\" title=\"样式链接\"></a>样式链接</h3><p>可以设置链接样式。例如，您可能想要设置在流程中向后移动的链接的样式。由于链接没有ID的方式与节点相同，因此需要某种其他方式来确定链接应附加到的样式。在图表中定义链接时使用的订单号代替id。在下面的示例中，linkStyle语句中定义的样式将属于图中的第四个链接：</p>\n<pre><code class=\"bash\">linkStyle 3 stroke:#ff3,stroke-width:4px;\n\n</code></pre>\n<h3 id=\"设置节点样式\"><a href=\"#设置节点样式\" class=\"headerlink\" title=\"设置节点样式\"></a>设置节点样式</h3><p>可以将特定样式（例如，较粗的边框或不同的背景颜色）应用于节点。</p>\n<pre><code class=\"bash\">graph LR\n    id1(Start)--&gt;id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\n\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</pre>\n\n<h3 id=\"班级\"><a href=\"#班级\" class=\"headerlink\" title=\"班级\"></a>班级</h3><p>每次定义样式时，更方便的方法是定义一类样式，并将该类附加到应具有不同外观的节点上。</p>\n<p>类定义如下例所示：</p>\n<pre><code class=\"bash\">classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n</code></pre>\n<p>将类附加到节点的操作如下:</p>\n<pre><code class=\"bash\">class nodeId1 className;\n</code></pre>\n<p>也可以在一个语句中将类附加到节点列表：</p>\n<pre><code class=\"bash\">class nodeId1,nodeId2 className;\n</code></pre>\n<h3 id=\"CSS类\"><a href=\"#CSS类\" class=\"headerlink\" title=\"CSS类\"></a>CSS类</h3><p>也可以以css样式预定义可从图形定义中应用的类，如下例所示：</p>\n<p>示例样式:</p>\n<pre><code class=\"bash\">&lt;style&gt;\n    .cssClass &gt; rect{\n        fill:#FF0000;\n        stroke:#FFFF00;\n        stroke-width:4px;\n    }\n&lt;/style&gt;\n</code></pre>\n<p>示例定义:</p>\n<pre><code class=\"bash\">graph LR;\n    A--&gt;B[AAA&lt;span&gt;BBB&lt;/span&gt;];\n    B--&gt;D;\n    class A cssClass;\n</code></pre>\n<pre class=\"mermaid\">graph LR;\n    A-->B[AAA<span>BBB</span>];\n    B-->D;\n    class A cssClass;</pre>\n\n<h3 id=\"默认类\"><a href=\"#默认类\" class=\"headerlink\" title=\"默认类\"></a>默认类</h3><p>如果一个类被命名为default，它将被分配给所有没有特定类定义的类。</p>\n<pre><code class=\"bash\">classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n</code></pre>\n<h3 id=\"基本支持fontawesome\"><a href=\"#基本支持fontawesome\" class=\"headerlink\" title=\"基本支持fontawesome\"></a>基本支持fontawesome</h3><p>可以从fontawesome添加图标。</p>\n<p>通过语法fa：#icon类名＃来访问图标。</p>\n<pre><code class=\"bash\">graph TD\n    B[&quot;fa:fa-twitter for peace&quot;]\n    B--&gt;C[fa:fa-ban forbidden]\n    B--&gt;D(fa:fa-spinner);\n    B--&gt;E(A fa:fa-camera-retro perhaps?);\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?);</pre>\n\n<h3 id=\"图的声明在顶点和链接之间有空格，并且没有分号\"><a href=\"#图的声明在顶点和链接之间有空格，并且没有分号\" class=\"headerlink\" title=\"图的声明在顶点和链接之间有空格，并且没有分号\"></a>图的声明在顶点和链接之间有空格，并且没有分号</h3><ul>\n<li><p>在图形声明中，语句现在也可以不使用分号结束。在0.2.16版本之后，以分号结束图语句只是可选的。因此，下面的图声明与图的旧声明同样有效。</p>\n</li>\n<li><p>顶点和链接之间只能有一个空格。但是，顶点和其文本以及链接和其文本之间不应有任何空格。图形声明的旧语法也将起作用，因此，此新功能是可选的，旨在提高可读性。</p>\n</li>\n</ul>\n<p>以下是图边缘的新声明，该声明与图边缘的旧声明同样有效。</p>\n<pre><code class=\"bash\">graph LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]</pre>\n\n<h3 id=\"组态\"><a href=\"#组态\" class=\"headerlink\" title=\"组态\"></a>组态</h3><p>是否可以调整渲染流程图的宽度。</p>\n<p>这是通过定义mermaid.flowchartConfig或通过CLI在配置中使用json文件来完成的。mermaidCLI页面中描述了如何使用CLI。可以将mermaid.flowchartConfig设置为带有配置参数或相应对象的JSON字符串。</p>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-18 01:51:43\n * @Description: file content\n -->\n\n<h2 id=\"流程图-基本语法\"><a href=\"#流程图-基本语法\" class=\"headerlink\" title=\"流程图-基本语法\"></a>流程图-基本语法</h2><h3 id=\"这声明了一个从上到下（TD或TB）定向的图形\"><a href=\"#这声明了一个从上到下（TD或TB）定向的图形\" class=\"headerlink\" title=\"这声明了一个从上到下（TD或TB）定向的图形\"></a>这声明了一个从上到下（TD或TB）定向的图形</h3><pre><code class=\"bash\">graph TD\n    Start --&gt; Stop\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    Start --> Stop</pre>\n\n<h3 id=\"这声明了一个从左到右的图（LR）\"><a href=\"#这声明了一个从左到右的图（LR）\" class=\"headerlink\" title=\"这声明了一个从左到右的图（LR）\"></a>这声明了一个从左到右的图（LR）</h3><pre><code class=\"bash\">graph LR\n    Start --&gt; Stop\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    Start --> Stop</pre>\n\n<ul>\n<li>可能的方向是：</li>\n</ul>\n<ol>\n<li><p>TB-顶底</p>\n</li>\n<li><p>BT-底部顶部</p>\n</li>\n<li><p>RL-右左</p>\n</li>\n<li><p>LR-左右</p>\n</li>\n<li><p>TD-与TB相同</p>\n</li>\n</ol>\n<h3 id=\"节点和形状\"><a href=\"#节点和形状\" class=\"headerlink\" title=\"节点和形状\"></a>节点和形状</h3><h3 id=\"节点（默认）\"><a href=\"#节点（默认）\" class=\"headerlink\" title=\"节点（默认）\"></a>节点（默认）</h3><pre><code class=\"bash\">graph LR\n    id\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id</pre>\n\n<p>请注意，id是框中显示的ID。</p>\n<h3 id=\"带有文本的节点\"><a href=\"#带有文本的节点\" class=\"headerlink\" title=\"带有文本的节点\"></a>带有文本的节点</h3><pre><code class=\"bash\">graph LR\n    id1[This is the text in the box]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1[This is the text in the box]</pre>\n\n<p>也可以在不同于ID的框中设置文本。如果多次执行此操作，则这是将要使用的节点的最后一个文本。同样，如果稍后定义节点的边缘，则可以省略文本定义。渲染框时将使用先前定义的那个。</p>\n<h3 id=\"具有圆边的节点\"><a href=\"#具有圆边的节点\" class=\"headerlink\" title=\"具有圆边的节点\"></a>具有圆边的节点</h3><pre><code class=\"bash\">graph LR\n    id1(This is the text in the box)\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1(This is the text in the box)</pre>\n\n<h3 id=\"圆形式的节点\"><a href=\"#圆形式的节点\" class=\"headerlink\" title=\"圆形式的节点\"></a>圆形式的节点</h3><pre><code class=\"bash\">graph LR\n    id1((This is the text in the circle))\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1((This is the text in the circle))</pre>\n\n<h3 id=\"非对称形状的节点\"><a href=\"#非对称形状的节点\" class=\"headerlink\" title=\"非对称形状的节点\"></a>非对称形状的节点</h3><pre><code class=\"bash\">graph LR\n    id1&gt;This is the text in the box]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1>This is the text in the box]</pre>\n\n<p>当前，只有上面的形状是可能的，而不是它的镜子。这可能会随着将来的版本而改变。</p>\n<h3 id=\"一个节点（菱形）\"><a href=\"#一个节点（菱形）\" class=\"headerlink\" title=\"一个节点（菱形）\"></a>一个节点（菱形）</h3><pre><code class=\"bash\">graph LR\n    id1{This is the text in the box}\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1{This is the text in the box}</pre>\n\n<h3 id=\"梯形\"><a href=\"#梯形\" class=\"headerlink\" title=\"梯形\"></a>梯形</h3><pre><code class=\"bash\">graph TD\n    A[/Christmas\\]\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    A[/Christmas\\]</pre>\n\n<h3 id=\"梯形alt\"><a href=\"#梯形alt\" class=\"headerlink\" title=\"梯形alt\"></a>梯形alt</h3><pre><code class=\"bash\">graph TD\n    B[\\Go shopping/]\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    B[\\Go shopping/]</pre>\n\n<h3 id=\"节点之间的链接\"><a href=\"#节点之间的链接\" class=\"headerlink\" title=\"节点之间的链接\"></a>节点之间的链接</h3><p>节点可以通过链接/边缘连接。可以具有不同类型的链接，也可以将文本字符串附加到链接。</p>\n<h3 id=\"箭头链接\"><a href=\"#箭头链接\" class=\"headerlink\" title=\"箭头链接\"></a>箭头链接</h3><pre><code class=\"bash\">graph LR\n    A--&gt;B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A-->B</pre>\n\n<h3 id=\"一个开放的链接\"><a href=\"#一个开放的链接\" class=\"headerlink\" title=\"一个开放的链接\"></a>一个开放的链接</h3><pre><code class=\"bash\">graph LR\n    A --- B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A --- B</pre>\n\n<h3 id=\"链接上的文字\"><a href=\"#链接上的文字\" class=\"headerlink\" title=\"链接上的文字\"></a>链接上的文字</h3><pre><code class=\"bash\">graph LR\n    A-- This is the text ---B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A-- This is the text ---B</pre>\n\n<p>或者</p>\n<pre><code class=\"bash\">graph LR\n    A---|This is the text|B\n</code></pre>\n<h3 id=\"带有箭头和文字的链接\"><a href=\"#带有箭头和文字的链接\" class=\"headerlink\" title=\"带有箭头和文字的链接\"></a>带有箭头和文字的链接</h3><pre><code class=\"bash\">graph LR\n    A--&gt;|text|B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A-->|text|B</pre>\n\n<p>或者</p>\n<pre><code class=\"base\">graph LR\n    A-- text --&gt;B\n</code></pre>\n<h3 id=\"虚线链接\"><a href=\"#虚线链接\" class=\"headerlink\" title=\"虚线链接\"></a>虚线链接</h3><pre><code class=\"bash\">graph LR;\n   A-.-&gt;B;\n</code></pre>\n<pre class=\"mermaid\">graph LR;\n   A-.->B;</pre>\n\n<h3 id=\"带文字的虚线链接\"><a href=\"#带文字的虚线链接\" class=\"headerlink\" title=\"带文字的虚线链接\"></a>带文字的虚线链接</h3><pre><code class=\"bash\">graph LR\n   A-. text .-&gt; B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A-. text .-> B</pre>\n\n<h3 id=\"粗链接\"><a href=\"#粗链接\" class=\"headerlink\" title=\"粗链接\"></a>粗链接</h3><pre><code class=\"bash\">graph LR\n   A ==&gt; B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A ==> B</pre>\n\n<h3 id=\"带有文字的粗链接\"><a href=\"#带有文字的粗链接\" class=\"headerlink\" title=\"带有文字的粗链接\"></a>带有文字的粗链接</h3><pre><code class=\"bash\">graph LR\n   A == text ==&gt; B\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A == text ==> B</pre>\n\n<h3 id=\"链接链接\"><a href=\"#链接链接\" class=\"headerlink\" title=\"链接链接\"></a>链接链接</h3><p>可以按如下所示在同一行中声明许多链接：</p>\n<pre><code class=\"bash\">graph LR\n   A -- text --&gt; B -- text2 --&gt; C\n</code></pre>\n<pre class=\"mermaid\">graph LR\n   A -- text --> B -- text2 --> C</pre>\n\n<h3 id=\"破坏语法的特殊字符\"><a href=\"#破坏语法的特殊字符\" class=\"headerlink\" title=\"破坏语法的特殊字符\"></a>破坏语法的特殊字符</h3><pre><code class=\"bash\">graph LR\n    id1[&quot;This is the (text) in the box&quot;]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1[\"This is the (text) in the box\"]</pre>\n\n<h3 id=\"实体代码以转义字符\"><a href=\"#实体代码以转义字符\" class=\"headerlink\" title=\"实体代码以转义字符\"></a>实体代码以转义字符</h3><pre><code class=\"bash\">graph LR\n    A[&quot;A double quote:#quot;&quot;] --&gt;B[&quot;A dec char:#9829;&quot;]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A[\"A double quote:#quot;\"] -->B[\"A dec char:#9829;\"]</pre>\n\n<h3 id=\"子图\"><a href=\"#子图\" class=\"headerlink\" title=\"子图\"></a>子图</h3><pre><code class=\"bash\">subgraph title\n    graph definition\nend</code></pre>\n<h3 id=\"子图案例\"><a href=\"#子图案例\" class=\"headerlink\" title=\"子图案例\"></a>子图案例</h3><pre><code class=\"bash\">graph TB\n    c1--&gt;a2\n    subgraph one\n    a1--&gt;a2\n    end\n    subgraph two\n    b1--&gt;b2\n    end\n    subgraph three\n    c1--&gt;c2\n    end\n</code></pre>\n<pre class=\"mermaid\">graph TB\n    c1-->a2\n    subgraph one\n    a1-->a2\n    end\n    subgraph two\n    b1-->b2\n    end\n    subgraph three\n    c1-->c2\n    end</pre>\n\n<h3 id=\"相互作用\"><a href=\"#相互作用\" class=\"headerlink\" title=\"相互作用\"></a>相互作用</h3><p>可以将click事件绑定到节点，单击可能导致JavaScript回调或链接，该链接将在新的浏览器选项卡中打开。注意：使用securityLevel=’strict’时将禁用此功能，使用时将启用securityLevel=’loose’。</p>\n<pre><code class=\"bash\">click nodeId callback\n</code></pre>\n<ul>\n<li>nodeId是节点的ID</li>\n<li>callback是在显示图形的页面上定义的javascript函数的名称，该函数将使用nodeId作为参数来调用。<br>以下是工具提示用法的示例：</li>\n</ul>\n<pre><code class=\"bash\">&lt;script&gt;\n    var callback = function(){\n        alert(&#39;A callback was triggered&#39;);\n    }\n&lt;script&gt;\n</code></pre>\n<p>工具提示文本用双引号引起来。工具提示的样式由.mermaidTooltip类设置。</p>\n<pre class=\"mermaid\">graph LR;\n    A-->B;\n    click A callback \"Tooltip for a callback\"\n    click B \"http://www.github.com\" \"This is a tooltip for a link\"</pre>\n\n<pre><code class=\"bash\">graph LR;\n    A--&gt;B;\n    click A callback &quot;Tooltip for a callback&quot;\n    click B &quot;http://www.github.com&quot; &quot;This is a tooltip for a link&quot;\n</code></pre>\n<h3 id=\"样式节点链接\"><a href=\"#样式节点链接\" class=\"headerlink\" title=\"样式节点链接\"></a>样式节点链接</h3><h3 id=\"样式链接\"><a href=\"#样式链接\" class=\"headerlink\" title=\"样式链接\"></a>样式链接</h3><p>可以设置链接样式。例如，您可能想要设置在流程中向后移动的链接的样式。由于链接没有ID的方式与节点相同，因此需要某种其他方式来确定链接应附加到的样式。在图表中定义链接时使用的订单号代替id。在下面的示例中，linkStyle语句中定义的样式将属于图中的第四个链接：</p>\n<pre><code class=\"bash\">linkStyle 3 stroke:#ff3,stroke-width:4px;\n\n</code></pre>\n<h3 id=\"设置节点样式\"><a href=\"#设置节点样式\" class=\"headerlink\" title=\"设置节点样式\"></a>设置节点样式</h3><p>可以将特定样式（例如，较粗的边框或不同的背景颜色）应用于节点。</p>\n<pre><code class=\"bash\">graph LR\n    id1(Start)--&gt;id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5\n\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    id1(Start)-->id2(Stop)\n    style id1 fill:#f9f,stroke:#333,stroke-width:4px\n    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</pre>\n\n<h3 id=\"班级\"><a href=\"#班级\" class=\"headerlink\" title=\"班级\"></a>班级</h3><p>每次定义样式时，更方便的方法是定义一类样式，并将该类附加到应具有不同外观的节点上。</p>\n<p>类定义如下例所示：</p>\n<pre><code class=\"bash\">classDef className fill:#f9f,stroke:#333,stroke-width:4px;\n</code></pre>\n<p>将类附加到节点的操作如下:</p>\n<pre><code class=\"bash\">class nodeId1 className;\n</code></pre>\n<p>也可以在一个语句中将类附加到节点列表：</p>\n<pre><code class=\"bash\">class nodeId1,nodeId2 className;\n</code></pre>\n<h3 id=\"CSS类\"><a href=\"#CSS类\" class=\"headerlink\" title=\"CSS类\"></a>CSS类</h3><p>也可以以css样式预定义可从图形定义中应用的类，如下例所示：</p>\n<p>示例样式:</p>\n<pre><code class=\"bash\">&lt;style&gt;\n    .cssClass &gt; rect{\n        fill:#FF0000;\n        stroke:#FFFF00;\n        stroke-width:4px;\n    }\n&lt;/style&gt;\n</code></pre>\n<p>示例定义:</p>\n<pre><code class=\"bash\">graph LR;\n    A--&gt;B[AAA&lt;span&gt;BBB&lt;/span&gt;];\n    B--&gt;D;\n    class A cssClass;\n</code></pre>\n<pre class=\"mermaid\">graph LR;\n    A-->B[AAA<span>BBB</span>];\n    B-->D;\n    class A cssClass;</pre>\n\n<h3 id=\"默认类\"><a href=\"#默认类\" class=\"headerlink\" title=\"默认类\"></a>默认类</h3><p>如果一个类被命名为default，它将被分配给所有没有特定类定义的类。</p>\n<pre><code class=\"bash\">classDef default fill:#f9f,stroke:#333,stroke-width:4px;\n</code></pre>\n<h3 id=\"基本支持fontawesome\"><a href=\"#基本支持fontawesome\" class=\"headerlink\" title=\"基本支持fontawesome\"></a>基本支持fontawesome</h3><p>可以从fontawesome添加图标。</p>\n<p>通过语法fa：#icon类名＃来访问图标。</p>\n<pre><code class=\"bash\">graph TD\n    B[&quot;fa:fa-twitter for peace&quot;]\n    B--&gt;C[fa:fa-ban forbidden]\n    B--&gt;D(fa:fa-spinner);\n    B--&gt;E(A fa:fa-camera-retro perhaps?);\n</code></pre>\n<pre class=\"mermaid\">graph TD\n    B[\"fa:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?);</pre>\n\n<h3 id=\"图的声明在顶点和链接之间有空格，并且没有分号\"><a href=\"#图的声明在顶点和链接之间有空格，并且没有分号\" class=\"headerlink\" title=\"图的声明在顶点和链接之间有空格，并且没有分号\"></a>图的声明在顶点和链接之间有空格，并且没有分号</h3><ul>\n<li><p>在图形声明中，语句现在也可以不使用分号结束。在0.2.16版本之后，以分号结束图语句只是可选的。因此，下面的图声明与图的旧声明同样有效。</p>\n</li>\n<li><p>顶点和链接之间只能有一个空格。但是，顶点和其文本以及链接和其文本之间不应有任何空格。图形声明的旧语法也将起作用，因此，此新功能是可选的，旨在提高可读性。</p>\n</li>\n</ul>\n<p>以下是图边缘的新声明，该声明与图边缘的旧声明同样有效。</p>\n<pre><code class=\"bash\">graph LR\n    A[Hard edge] --&gt;|Link text| B(Round edge)\n    B --&gt; C{Decision}\n    C --&gt;|One| D[Result one]\n    C --&gt;|Two| E[Result two]\n</code></pre>\n<pre class=\"mermaid\">graph LR\n    A[Hard edge] -->|Link text| B(Round edge)\n    B --> C{Decision}\n    C -->|One| D[Result one]\n    C -->|Two| E[Result two]</pre>\n\n<h3 id=\"组态\"><a href=\"#组态\" class=\"headerlink\" title=\"组态\"></a>组态</h3><p>是否可以调整渲染流程图的宽度。</p>\n<p>这是通过定义mermaid.flowchartConfig或通过CLI在配置中使用json文件来完成的。mermaidCLI页面中描述了如何使用CLI。可以将mermaid.flowchartConfig设置为带有配置参数或相应对象的JSON字符串。</p>\n"},{"title":"类图","abstract":"这是一篇加密的文章。","message":"enter password to read.","date":"2019-11-17T18:11:57.000Z","_content":"\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-21 09:20:26\n * @Description: file content\n -->\n\n## 类图-基本语法\n\n>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类，其属性，操作（或方法）以及对象之间的关系来描述系统的结构。 ”。维基百科\n\n类图是面向对象建模的主要构建块。它用于应用程序结构的一般概念建模，以及用于将模型转换为编程代码的详细建模。类图也可以用于数据建模。类图中的类表示主要元素，应用程序中的交互以及要编程的类。\n\n### 美人鱼可以渲染类图\n\n``` bash\n classDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n\n```\n\n``` mermaid\n classDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n\n```\n\n### 饼图\n\n```bash\npie\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n\n```\n\n``` mermaid\npie\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n\n```\n","source":"_posts/test/类图.md","raw":"---\ntitle: 类图\ntags: frist\ncategories: web\n# password: 123456\nabstract: 这是一篇加密的文章。\nmessage: enter password to read.\ndate: 2019-11-18 02:11:57\n---\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-21 09:20:26\n * @Description: file content\n -->\n\n## 类图-基本语法\n\n>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类，其属性，操作（或方法）以及对象之间的关系来描述系统的结构。 ”。维基百科\n\n类图是面向对象建模的主要构建块。它用于应用程序结构的一般概念建模，以及用于将模型转换为编程代码的详细建模。类图也可以用于数据建模。类图中的类表示主要元素，应用程序中的交互以及要编程的类。\n\n### 美人鱼可以渲染类图\n\n``` bash\n classDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n\n```\n\n``` mermaid\n classDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n\n```\n\n### 饼图\n\n```bash\npie\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n\n```\n\n``` mermaid\npie\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15\n\n```\n","slug":"test/类图","published":1,"updated":"2020-10-19T04:06:49.988Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23ao2000ax9r3erzjdkph","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-21 09:20:26\n * @Description: file content\n -->\n\n<h2 id=\"类图-基本语法\"><a href=\"#类图-基本语法\" class=\"headerlink\" title=\"类图-基本语法\"></a>类图-基本语法</h2><blockquote>\n<p>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类，其属性，操作（或方法）以及对象之间的关系来描述系统的结构。 ”。维基百科</p>\n</blockquote>\n<p>类图是面向对象建模的主要构建块。它用于应用程序结构的一般概念建模，以及用于将模型转换为编程代码的详细建模。类图也可以用于数据建模。类图中的类表示主要元素，应用程序中的交互以及要编程的类。</p>\n<h3 id=\"美人鱼可以渲染类图\"><a href=\"#美人鱼可以渲染类图\" class=\"headerlink\" title=\"美人鱼可以渲染类图\"></a>美人鱼可以渲染类图</h3><pre><code class=\"bash\"> classDiagram\n      Animal &lt;|-- Duck\n      Animal &lt;|-- Fish\n      Animal &lt;|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n</code></pre>\n<pre class=\"mermaid\"> classDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }</pre>\n\n<h3 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h3><pre><code class=\"bash\">pie\n    &quot;Dogs&quot; : 386\n    &quot;Cats&quot; : 85\n    &quot;Rats&quot; : 15\n</code></pre>\n<pre class=\"mermaid\">pie\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15</pre>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-21 09:20:26\n * @Description: file content\n -->\n\n<h2 id=\"类图-基本语法\"><a href=\"#类图-基本语法\" class=\"headerlink\" title=\"类图-基本语法\"></a>类图-基本语法</h2><blockquote>\n<p>“在软件工程中，统一建模语言（UML）中的类图是一种静态结构图，它通过显示系统的类，其属性，操作（或方法）以及对象之间的关系来描述系统的结构。 ”。维基百科</p>\n</blockquote>\n<p>类图是面向对象建模的主要构建块。它用于应用程序结构的一般概念建模，以及用于将模型转换为编程代码的详细建模。类图也可以用于数据建模。类图中的类表示主要元素，应用程序中的交互以及要编程的类。</p>\n<h3 id=\"美人鱼可以渲染类图\"><a href=\"#美人鱼可以渲染类图\" class=\"headerlink\" title=\"美人鱼可以渲染类图\"></a>美人鱼可以渲染类图</h3><pre><code class=\"bash\"> classDiagram\n      Animal &lt;|-- Duck\n      Animal &lt;|-- Fish\n      Animal &lt;|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }\n</code></pre>\n<pre class=\"mermaid\"> classDiagram\n      Animal <|-- Duck\n      Animal <|-- Fish\n      Animal <|-- Zebra\n      Animal : +int age\n      Animal : +String gender\n      Animal: +isMammal()\n      Animal: +mate()\n      class Duck{\n          +String beakColor\n          +swim()\n          +quack()\n      }\n      class Fish{\n          -int sizeInFeet\n          -canEat()\n      }\n      class Zebra{\n          +bool is_wild\n          +run()\n      }</pre>\n\n<h3 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h3><pre><code class=\"bash\">pie\n    &quot;Dogs&quot; : 386\n    &quot;Cats&quot; : 85\n    &quot;Rats&quot; : 15\n</code></pre>\n<pre class=\"mermaid\">pie\n    \"Dogs\" : 386\n    \"Cats\" : 85\n    \"Rats\" : 15</pre>\n"},{"title":"顺序图","abstract":"这是一篇加密的文章。","message":"enter password to read.","date":"2019-11-17T18:11:57.000Z","_content":"\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 21:17:10\n * @Description: file content\n -->\n\n## 顺序图-基本语法\n\n>序列图是一个交互图，它显示进程如何相互操作以及以什么顺序进行操作。\n\n### 渲染序列图\n\n``` bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n### 句法\n\n参加者\n可以像本页第一个示例中那样隐式定义参与者。在图表源文本中按出现顺序呈现参与者或演员。有时，您可能想以不同于第一条消息出现的顺序来显示参与者。通过执行以下操作可以指定演员的出场顺序\n\n``` bash\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n### 别名\n\n演员可以具有方便的标识符和描述性标签。\n\n``` bash\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n\n```\n\n### 留言内容\n\n消息可以是实线或虚线显示的两种。\n\n``` bash\n[Actor][Arrow][Actor]:Message text\n\n```\n\n类型|描述\n-|-\n->|实线无箭头\n->|虚线无箭头\n->>|带箭头的实线\n->>|带箭头的虚线\n-X|实线，末端带有叉号（异步）\n- X|虚线末端带有叉号（异步）\n\n### 激活方式\n\n可以激活和停用角色。（de）激活可以是专用的声明：\n\n``` bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n\n```\n\n通过在消息箭头后面添加+/ -后缀，还有一种快捷方式标记：\n\n``` bash\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n\n```\n\n可以为同一演员堆叠激活：\n\n``` bash\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n\n```\n\n``` mermaid\nsequenceDiagram\nAlice->>+John: Hello John, how are you?\nAlice->>+John: John, can you hear me?\nJohn-->>-Alice: Hi Alice, I can hear you!\nJohn-->>-Alice: I feel great!\n\n```\n\n### 笔记\n\n可以在顺序图中添加注释。这是通过注解[[右| 左| 结束] [演员]：笔记内容中的文字\n\n请参阅以下示例\n\n``` bash\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n\n```\n\n``` mermaid\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n\n```\n\n也可以创建跨越两个参与者的笔记：\n\n``` bash\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n\n```\n\n### 循环\n\n``` bash\nloop Loop text\n... statements ...\nend\n\n```\n\n请参阅以下示例：\n\n``` bash\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n\n```\n\n``` mermaid\nsequenceDiagram\nAlice->John: Hello John, how are you?\nloop Every minute\n    John-->Alice: Great!\nend\n\n```\n\n### Alt键\n\n可以在顺序图中表达替代路径。这是通过符号来完成的\n\n``` bash\nalt Describing text\n... statements ...\nelse\n... statements ...\nend\n\n```\n\n或者是否有可选的序列（如果没有其他序列）。\n\n``` bash\nopt Describing text\n... statements ...\nend\n\n```\n\n请参阅以下示例：\n\n``` bash\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n\n```\n\n### 背景突出显示\n\n通过提供彩色背景矩形可以突出显示流。这是通过符号来完成的\n\n颜色是使用rgb和rgba语法定义的。\n\n``` bash\nrect rgb(0, 255, 0)\n... content ...\nend\n\n```\n\nClass|Description\n-|-\nactor|Style for the actor box at the top of the diagram.\ntext.actor|Styles for text in the actor box at the top of the diagram.\nactor-line|The vertical line for an actor.\nmessageLine0|Styles for the solid message line.\nmessageLine1|Styles for the dotted message line.\nmessageText|Defines styles for the text on the message arrows.\nlabelBox|Defines styles label to left in a loop.\nlabelText|Styles for the text in label for loops.\nloopText|Styles for the text in the loop box.\nloopLine|Defines styles for the lines in the loop box.\nnote|Styles for the note box.\nnoteText|Styles for the text on in the note boxes.\n","source":"_posts/test/顺序图.md","raw":"---\ntitle: 顺序图\ntags: frist\ncategories: web\n# password: 123456\nabstract: 这是一篇加密的文章。\nmessage: enter password to read.\ndate: 2019-11-18 02:11:57\n---\n\n<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 21:17:10\n * @Description: file content\n -->\n\n## 顺序图-基本语法\n\n>序列图是一个交互图，它显示进程如何相互操作以及以什么顺序进行操作。\n\n### 渲染序列图\n\n``` bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n### 句法\n\n参加者\n可以像本页第一个示例中那样隐式定义参与者。在图表源文本中按出现顺序呈现参与者或演员。有时，您可能想以不同于第一条消息出现的顺序来显示参与者。通过执行以下操作可以指定演员的出场顺序\n\n``` bash\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!\n\n```\n\n### 别名\n\n演员可以具有方便的标识符和描述性标签。\n\n``` bash\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!\n\n```\n\n### 留言内容\n\n消息可以是实线或虚线显示的两种。\n\n``` bash\n[Actor][Arrow][Actor]:Message text\n\n```\n\n类型|描述\n-|-\n->|实线无箭头\n->|虚线无箭头\n->>|带箭头的实线\n->>|带箭头的虚线\n-X|实线，末端带有叉号（异步）\n- X|虚线末端带有叉号（异步）\n\n### 激活方式\n\n可以激活和停用角色。（de）激活可以是专用的声明：\n\n``` bash\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John\n\n```\n\n通过在消息箭头后面添加+/ -后缀，还有一种快捷方式标记：\n\n``` bash\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!\n\n```\n\n可以为同一演员堆叠激活：\n\n``` bash\nsequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    Alice->>+John: John, can you hear me?\n    John-->>-Alice: Hi Alice, I can hear you!\n    John-->>-Alice: I feel great!\n\n```\n\n``` mermaid\nsequenceDiagram\nAlice->>+John: Hello John, how are you?\nAlice->>+John: John, can you hear me?\nJohn-->>-Alice: Hi Alice, I can hear you!\nJohn-->>-Alice: I feel great!\n\n```\n\n### 笔记\n\n可以在顺序图中添加注释。这是通过注解[[右| 左| 结束] [演员]：笔记内容中的文字\n\n请参阅以下示例\n\n``` bash\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n\n```\n\n``` mermaid\nsequenceDiagram\n    participant John\n    Note right of John: Text in note\n\n```\n\n也可以创建跨越两个参与者的笔记：\n\n``` bash\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n\n```\n\n### 循环\n\n``` bash\nloop Loop text\n... statements ...\nend\n\n```\n\n请参阅以下示例：\n\n``` bash\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    loop Every minute\n        John-->Alice: Great!\n    end\n\n```\n\n``` mermaid\nsequenceDiagram\nAlice->John: Hello John, how are you?\nloop Every minute\n    John-->Alice: Great!\nend\n\n```\n\n### Alt键\n\n可以在顺序图中表达替代路径。这是通过符号来完成的\n\n``` bash\nalt Describing text\n... statements ...\nelse\n... statements ...\nend\n\n```\n\n或者是否有可选的序列（如果没有其他序列）。\n\n``` bash\nopt Describing text\n... statements ...\nend\n\n```\n\n请参阅以下示例：\n\n``` bash\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n\n```\n\n``` mermaid\nsequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end\n\n```\n\n### 背景突出显示\n\n通过提供彩色背景矩形可以突出显示流。这是通过符号来完成的\n\n颜色是使用rgb和rgba语法定义的。\n\n``` bash\nrect rgb(0, 255, 0)\n... content ...\nend\n\n```\n\nClass|Description\n-|-\nactor|Style for the actor box at the top of the diagram.\ntext.actor|Styles for text in the actor box at the top of the diagram.\nactor-line|The vertical line for an actor.\nmessageLine0|Styles for the solid message line.\nmessageLine1|Styles for the dotted message line.\nmessageText|Defines styles for the text on the message arrows.\nlabelBox|Defines styles label to left in a loop.\nlabelText|Styles for the text in label for loops.\nloopText|Styles for the text in the loop box.\nloopLine|Defines styles for the lines in the loop box.\nnote|Styles for the note box.\nnoteText|Styles for the text on in the note boxes.\n","slug":"test/顺序图","published":1,"updated":"2020-10-19T04:06:49.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckgg23ao6000ex9r34zuiean7","content":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 21:17:10\n * @Description: file content\n -->\n\n<h2 id=\"顺序图-基本语法\"><a href=\"#顺序图-基本语法\" class=\"headerlink\" title=\"顺序图-基本语法\"></a>顺序图-基本语法</h2><blockquote>\n<p>序列图是一个交互图，它显示进程如何相互操作以及以什么顺序进行操作。</p>\n</blockquote>\n<h3 id=\"渲染序列图\"><a href=\"#渲染序列图\" class=\"headerlink\" title=\"渲染序列图\"></a>渲染序列图</h3><pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h3 id=\"句法\"><a href=\"#句法\" class=\"headerlink\" title=\"句法\"></a>句法</h3><p>参加者<br>可以像本页第一个示例中那样隐式定义参与者。在图表源文本中按出现顺序呈现参与者或演员。有时，您可能想以不同于第一条消息出现的顺序来显示参与者。通过执行以下操作可以指定演员的出场顺序</p>\n<pre><code class=\"bash\">sequenceDiagram\n    participant John\n    participant Alice\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h3 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h3><p>演员可以具有方便的标识符和描述性标签。</p>\n<pre><code class=\"bash\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A-&gt;&gt;J: Hello John, how are you?\n    J-&gt;&gt;A: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!</pre>\n\n<h3 id=\"留言内容\"><a href=\"#留言内容\" class=\"headerlink\" title=\"留言内容\"></a>留言内容</h3><p>消息可以是实线或虚线显示的两种。</p>\n<pre><code class=\"bash\">[Actor][Arrow][Actor]:Message text\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-&gt;</td>\n<td>实线无箭头</td>\n</tr>\n<tr>\n<td>-&gt;</td>\n<td>虚线无箭头</td>\n</tr>\n<tr>\n<td>-&gt;&gt;</td>\n<td>带箭头的实线</td>\n</tr>\n<tr>\n<td>-&gt;&gt;</td>\n<td>带箭头的虚线</td>\n</tr>\n<tr>\n<td>-X</td>\n<td>实线，末端带有叉号（异步）</td>\n</tr>\n<tr>\n<td>- X</td>\n<td>虚线末端带有叉号（异步）</td>\n</tr>\n</tbody></table>\n<h3 id=\"激活方式\"><a href=\"#激活方式\" class=\"headerlink\" title=\"激活方式\"></a>激活方式</h3><p>可以激活和停用角色。（de）激活可以是专用的声明：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    activate John\n    John--&gt;&gt;Alice: Great!\n    deactivate John\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John</pre>\n\n<p>通过在消息箭头后面添加+/ -后缀，还有一种快捷方式标记：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    John--&gt;&gt;-Alice: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!</pre>\n\n<p>可以为同一演员堆叠激活：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\nAlice->>+John: Hello John, how are you?\nAlice->>+John: John, can you hear me?\nJohn-->>-Alice: Hi Alice, I can hear you!\nJohn-->>-Alice: I feel great!</pre>\n\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>可以在顺序图中添加注释。这是通过注解[[右| 左| 结束] [演员]：笔记内容中的文字</p>\n<p>请参阅以下示例</p>\n<pre><code class=\"bash\">sequenceDiagram\n    participant John\n    Note right of John: Text in note\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    Note right of John: Text in note</pre>\n\n<p>也可以创建跨越两个参与者的笔记：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction</pre>\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><pre><code class=\"bash\">loop Loop text\n... statements ...\nend\n</code></pre>\n<p>请参阅以下示例：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;John: Hello John, how are you?\n    loop Every minute\n        John--&gt;Alice: Great!\n    end\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\nAlice->John: Hello John, how are you?\nloop Every minute\n    John-->Alice: Great!\nend</pre>\n\n<h3 id=\"Alt键\"><a href=\"#Alt键\" class=\"headerlink\" title=\"Alt键\"></a>Alt键</h3><p>可以在顺序图中表达替代路径。这是通过符号来完成的</p>\n<pre><code class=\"bash\">alt Describing text\n... statements ...\nelse\n... statements ...\nend\n</code></pre>\n<p>或者是否有可选的序列（如果没有其他序列）。</p>\n<pre><code class=\"bash\">opt Describing text\n... statements ...\nend\n</code></pre>\n<p>请参阅以下示例：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;Bob: Hello Bob, how are you?\n    alt is sick\n        Bob-&gt;&gt;Alice: Not so good :(\n    else is well\n        Bob-&gt;&gt;Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob-&gt;&gt;Alice: Thanks for asking\n    end\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end</pre>\n\n<h3 id=\"背景突出显示\"><a href=\"#背景突出显示\" class=\"headerlink\" title=\"背景突出显示\"></a>背景突出显示</h3><p>通过提供彩色背景矩形可以突出显示流。这是通过符号来完成的</p>\n<p>颜色是使用rgb和rgba语法定义的。</p>\n<pre><code class=\"bash\">rect rgb(0, 255, 0)\n... content ...\nend\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>actor</td>\n<td>Style for the actor box at the top of the diagram.</td>\n</tr>\n<tr>\n<td>text.actor</td>\n<td>Styles for text in the actor box at the top of the diagram.</td>\n</tr>\n<tr>\n<td>actor-line</td>\n<td>The vertical line for an actor.</td>\n</tr>\n<tr>\n<td>messageLine0</td>\n<td>Styles for the solid message line.</td>\n</tr>\n<tr>\n<td>messageLine1</td>\n<td>Styles for the dotted message line.</td>\n</tr>\n<tr>\n<td>messageText</td>\n<td>Defines styles for the text on the message arrows.</td>\n</tr>\n<tr>\n<td>labelBox</td>\n<td>Defines styles label to left in a loop.</td>\n</tr>\n<tr>\n<td>labelText</td>\n<td>Styles for the text in label for loops.</td>\n</tr>\n<tr>\n<td>loopText</td>\n<td>Styles for the text in the loop box.</td>\n</tr>\n<tr>\n<td>loopLine</td>\n<td>Defines styles for the lines in the loop box.</td>\n</tr>\n<tr>\n<td>note</td>\n<td>Styles for the note box.</td>\n</tr>\n<tr>\n<td>noteText</td>\n<td>Styles for the text on in the note boxes.</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<!--\n * @Author: za-wangxuezhong\n * @Date: 2019-11-17 22:19:51\n * @LastEditors: za-wangxuezhong\n * @LastEditTime: 2019-11-20 21:17:10\n * @Description: file content\n -->\n\n<h2 id=\"顺序图-基本语法\"><a href=\"#顺序图-基本语法\" class=\"headerlink\" title=\"顺序图-基本语法\"></a>顺序图-基本语法</h2><blockquote>\n<p>序列图是一个交互图，它显示进程如何相互操作以及以什么顺序进行操作。</p>\n</blockquote>\n<h3 id=\"渲染序列图\"><a href=\"#渲染序列图\" class=\"headerlink\" title=\"渲染序列图\"></a>渲染序列图</h3><pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h3 id=\"句法\"><a href=\"#句法\" class=\"headerlink\" title=\"句法\"></a>句法</h3><p>参加者<br>可以像本页第一个示例中那样隐式定义参与者。在图表源文本中按出现顺序呈现参与者或演员。有时，您可能想以不同于第一条消息出现的顺序来显示参与者。通过执行以下操作可以指定演员的出场顺序</p>\n<pre><code class=\"bash\">sequenceDiagram\n    participant John\n    participant Alice\n    Alice-&gt;&gt;John: Hello John, how are you?\n    John--&gt;&gt;Alice: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    participant Alice\n    Alice->>John: Hello John, how are you?\n    John-->>Alice: Great!</pre>\n\n<h3 id=\"别名\"><a href=\"#别名\" class=\"headerlink\" title=\"别名\"></a>别名</h3><p>演员可以具有方便的标识符和描述性标签。</p>\n<pre><code class=\"bash\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A-&gt;&gt;J: Hello John, how are you?\n    J-&gt;&gt;A: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    participant A as Alice\n    participant J as John\n    A->>J: Hello John, how are you?\n    J->>A: Great!</pre>\n\n<h3 id=\"留言内容\"><a href=\"#留言内容\" class=\"headerlink\" title=\"留言内容\"></a>留言内容</h3><p>消息可以是实线或虚线显示的两种。</p>\n<pre><code class=\"bash\">[Actor][Arrow][Actor]:Message text\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-&gt;</td>\n<td>实线无箭头</td>\n</tr>\n<tr>\n<td>-&gt;</td>\n<td>虚线无箭头</td>\n</tr>\n<tr>\n<td>-&gt;&gt;</td>\n<td>带箭头的实线</td>\n</tr>\n<tr>\n<td>-&gt;&gt;</td>\n<td>带箭头的虚线</td>\n</tr>\n<tr>\n<td>-X</td>\n<td>实线，末端带有叉号（异步）</td>\n</tr>\n<tr>\n<td>- X</td>\n<td>虚线末端带有叉号（异步）</td>\n</tr>\n</tbody></table>\n<h3 id=\"激活方式\"><a href=\"#激活方式\" class=\"headerlink\" title=\"激活方式\"></a>激活方式</h3><p>可以激活和停用角色。（de）激活可以是专用的声明：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;John: Hello John, how are you?\n    activate John\n    John--&gt;&gt;Alice: Great!\n    deactivate John\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>John: Hello John, how are you?\n    activate John\n    John-->>Alice: Great!\n    deactivate John</pre>\n\n<p>通过在消息箭头后面添加+/ -后缀，还有一种快捷方式标记：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    John--&gt;&gt;-Alice: Great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>+John: Hello John, how are you?\n    John-->>-Alice: Great!</pre>\n\n<p>可以为同一演员堆叠激活：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;+John: Hello John, how are you?\n    Alice-&gt;&gt;+John: John, can you hear me?\n    John--&gt;&gt;-Alice: Hi Alice, I can hear you!\n    John--&gt;&gt;-Alice: I feel great!\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\nAlice->>+John: Hello John, how are you?\nAlice->>+John: John, can you hear me?\nJohn-->>-Alice: Hi Alice, I can hear you!\nJohn-->>-Alice: I feel great!</pre>\n\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>可以在顺序图中添加注释。这是通过注解[[右| 左| 结束] [演员]：笔记内容中的文字</p>\n<p>请参阅以下示例</p>\n<pre><code class=\"bash\">sequenceDiagram\n    participant John\n    Note right of John: Text in note\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    participant John\n    Note right of John: Text in note</pre>\n\n<p>也可以创建跨越两个参与者的笔记：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction</pre>\n\n<h3 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h3><pre><code class=\"bash\">loop Loop text\n... statements ...\nend\n</code></pre>\n<p>请参阅以下示例：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;John: Hello John, how are you?\n    loop Every minute\n        John--&gt;Alice: Great!\n    end\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\nAlice->John: Hello John, how are you?\nloop Every minute\n    John-->Alice: Great!\nend</pre>\n\n<h3 id=\"Alt键\"><a href=\"#Alt键\" class=\"headerlink\" title=\"Alt键\"></a>Alt键</h3><p>可以在顺序图中表达替代路径。这是通过符号来完成的</p>\n<pre><code class=\"bash\">alt Describing text\n... statements ...\nelse\n... statements ...\nend\n</code></pre>\n<p>或者是否有可选的序列（如果没有其他序列）。</p>\n<pre><code class=\"bash\">opt Describing text\n... statements ...\nend\n</code></pre>\n<p>请参阅以下示例：</p>\n<pre><code class=\"bash\">sequenceDiagram\n    Alice-&gt;&gt;Bob: Hello Bob, how are you?\n    alt is sick\n        Bob-&gt;&gt;Alice: Not so good :(\n    else is well\n        Bob-&gt;&gt;Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob-&gt;&gt;Alice: Thanks for asking\n    end\n</code></pre>\n<pre class=\"mermaid\">sequenceDiagram\n    Alice->>Bob: Hello Bob, how are you?\n    alt is sick\n        Bob->>Alice: Not so good :(\n    else is well\n        Bob->>Alice: Feeling fresh like a daisy\n    end\n    opt Extra response\n        Bob->>Alice: Thanks for asking\n    end</pre>\n\n<h3 id=\"背景突出显示\"><a href=\"#背景突出显示\" class=\"headerlink\" title=\"背景突出显示\"></a>背景突出显示</h3><p>通过提供彩色背景矩形可以突出显示流。这是通过符号来完成的</p>\n<p>颜色是使用rgb和rgba语法定义的。</p>\n<pre><code class=\"bash\">rect rgb(0, 255, 0)\n... content ...\nend\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>actor</td>\n<td>Style for the actor box at the top of the diagram.</td>\n</tr>\n<tr>\n<td>text.actor</td>\n<td>Styles for text in the actor box at the top of the diagram.</td>\n</tr>\n<tr>\n<td>actor-line</td>\n<td>The vertical line for an actor.</td>\n</tr>\n<tr>\n<td>messageLine0</td>\n<td>Styles for the solid message line.</td>\n</tr>\n<tr>\n<td>messageLine1</td>\n<td>Styles for the dotted message line.</td>\n</tr>\n<tr>\n<td>messageText</td>\n<td>Defines styles for the text on the message arrows.</td>\n</tr>\n<tr>\n<td>labelBox</td>\n<td>Defines styles label to left in a loop.</td>\n</tr>\n<tr>\n<td>labelText</td>\n<td>Styles for the text in label for loops.</td>\n</tr>\n<tr>\n<td>loopText</td>\n<td>Styles for the text in the loop box.</td>\n</tr>\n<tr>\n<td>loopLine</td>\n<td>Defines styles for the lines in the loop box.</td>\n</tr>\n<tr>\n<td>note</td>\n<td>Styles for the note box.</td>\n</tr>\n<tr>\n<td>noteText</td>\n<td>Styles for the text on in the note boxes.</td>\n</tr>\n</tbody></table>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckgg23ao10009x9r3elhsfliq","category_id":"ckgg23anv0006x9r317ap8wcs","_id":"ckgg23ao7000gx9r3b4lc1cxq"},{"post_id":"ckgg23ans0004x9r31agu7s4z","category_id":"ckgg23anv0006x9r317ap8wcs","_id":"ckgg23ao8000jx9r3fh2009jt"},{"post_id":"ckgg23ao2000ax9r3erzjdkph","category_id":"ckgg23anv0006x9r317ap8wcs","_id":"ckgg23ao8000lx9r3a88517d1"},{"post_id":"ckgg23ao6000ex9r34zuiean7","category_id":"ckgg23anv0006x9r317ap8wcs","_id":"ckgg23ao9000nx9r39qocdym0"},{"post_id":"ckgg23anu0005x9r3bryf223h","category_id":"ckgg23anv0006x9r317ap8wcs","_id":"ckgg23ao9000ox9r3hy5md7n6"},{"post_id":"ckgg23anz0008x9r30evua59q","category_id":"ckgg23ao7000hx9r3442r5hoy","_id":"ckgg23ao9000px9r39jr04ocd"}],"PostTag":[{"post_id":"ckgg23ao10009x9r3elhsfliq","tag_id":"ckgg23any0007x9r3c9iyb06b","_id":"ckgg23ao6000dx9r37icjfhda"},{"post_id":"ckgg23ans0004x9r31agu7s4z","tag_id":"ckgg23any0007x9r3c9iyb06b","_id":"ckgg23ao7000fx9r3hnpga8x8"},{"post_id":"ckgg23ao2000ax9r3erzjdkph","tag_id":"ckgg23any0007x9r3c9iyb06b","_id":"ckgg23ao8000ix9r3f58u7083"},{"post_id":"ckgg23ao6000ex9r34zuiean7","tag_id":"ckgg23any0007x9r3c9iyb06b","_id":"ckgg23ao8000kx9r3d3wgg2uw"},{"post_id":"ckgg23anu0005x9r3bryf223h","tag_id":"ckgg23any0007x9r3c9iyb06b","_id":"ckgg23ao8000mx9r33u9pglum"}],"Tag":[{"name":"frist","_id":"ckgg23any0007x9r3c9iyb06b"}]}}